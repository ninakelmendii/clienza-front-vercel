{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport * as LANGUAGE from '../../store/language.json';\nexport default {\n  data: function () {\n    return {\n      orderItems: [{\n        text: this.translate(\"Last week\"),\n        value: 'week'\n      }, {\n        text: this.translate(\"Last month\"),\n        value: \"month\"\n      }, {\n        text: this.translate(\"Last year\"),\n        value: \"year\"\n      }],\n      orderValue: \"month\",\n      options: {\n        chart: {\n          toolbar: {\n            show: true,\n            tools: {\n              download: false\n            }\n          },\n          animations: {\n            enabled: true,\n            easing: \"easeinout\",\n            speed: 800,\n            animateGradually: {\n              enabled: true,\n              delay: 150\n            },\n            dynamicAnimation: {\n              enabled: true,\n              speed: 350\n            }\n          },\n          fontFamily: \"Lato, sans-serif\"\n        },\n        legend: {\n          markers: {\n            fillColors: ['#1A1F3A', '#36A5DD', '#FE9210']\n          }\n        },\n        theme: {\n          mode: \"light\"\n        },\n        stroke: {\n          show: true,\n          width: 2,\n          colors: ['transparent']\n        },\n        xaxis: {\n          type: 'date',\n          categories: [\"Loading\"]\n        },\n        grid: {\n          strokeDashArray: 7,\n          yaxis: {\n            lines: {\n              show: true\n            }\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: '40%',\n            endingShape: 'rounded'\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          opacity: 1,\n          colors: ['#1A1F3A', '#36A5DD', '#FE9210']\n        }\n      },\n      series: [{\n        name: 'Completed leads',\n        data: []\n      }, {\n        name: 'All leads',\n        data: []\n      }, {\n        name: 'Not completed',\n        data: []\n      }],\n      leads: [],\n      user: []\n    };\n  },\n  created() {\n    this.getStatistics();\n    this.getLeads();\n  },\n  methods: {\n    translate(word) {\n      let wordIndex = null;\n      LANGUAGE.forEach((lng, index) => {\n        if (lng.english.toLowerCase() == word.toLowerCase()) {\n          wordIndex = index;\n        }\n      });\n      if (wordIndex === null) {\n        return word;\n      }\n      if (this.$store.state.language == 'german') {\n        return LANGUAGE[wordIndex].german;\n      } else {\n        return LANGUAGE[wordIndex].english;\n      }\n    },\n    removeDuplicates(arr) {\n      return arr.filter((item, index) => arr.indexOf(item) === index);\n    },\n    getLeads(orderType = \"\") {\n      // this.$refs.apexChart.updateOptions({\n      //   xaxis: {\n      //     categories: [\"Loading\"] //ie [\"a\",\"b\",\"c\",\"d\"]\n      //   }\n      // });\n\n      axios.get(`/get_all_leads?order=${orderType}`).then(response => {\n        const leads = response.data;\n        const agents_id = [];\n        leads.forEach(lead => {\n          agents_id.push(lead.user_id);\n        });\n        let filtered_agents_id = this.removeDuplicates(agents_id);\n        axios.get(\"/get_all_users\").then(response => {\n          const allUsers = response.data;\n          this.options.xaxis.categories.length = 0;\n          const new_completed = [];\n          const new_all_leads = [];\n          const new_not_completed = [];\n          filtered_agents_id.forEach((fai, index) => {\n            let findAgent = allUsers.find(user => parseInt(user.id) == parseInt(fai));\n            if (findAgent == undefined) return;\n            let findLeads = leads.filter(lead => lead.user_id == findAgent.id);\n            if (findLeads.length != 0) {\n              console.count(findLeads.length);\n              findAgent.leads = findLeads;\n              filtered_agents_id[index] = findAgent;\n              this.options.xaxis.categories.push(findAgent.first_name.toString());\n              let completed = 0;\n              let not_completed = 0;\n              findLeads.forEach(lead => {\n                if (lead.status_id == 15) {\n                  completed++;\n                } else {\n                  not_completed++;\n                }\n              });\n              new_completed.push(completed);\n              new_all_leads.push(findLeads.length);\n              new_not_completed.push(not_completed);\n            }\n          });\n          this.$refs.apexChart.updateSeries([{\n            name: this.translate('Completed'),\n            data: new_completed\n          }, {\n            name: this.translate('All leads'),\n            data: new_all_leads\n          }, {\n            name: this.translate('Not completed'),\n            data: new_not_completed\n          }], false, true);\n        });\n      });\n    },\n    getStatistics() {\n      // axios\n      //     .get('/statistics')\n      //     .then(response => console.log(response))\n      //     .catch(err => console.log(err))\n      // axios\n      //     .get('/leadstatistics')\n      //     .then(response => {\n      //       let filtered_leads = []\n\n      //       response.data.forEach(lead => {\n      //           if(lead.status != null && lead.status.id == 15) {\n      //             filtered_leads = lead;\n      //           }\n      //       });\n\n      //       console.log(filtered_leads)\n      //     })\n      //     .catch(err => console.log(err))\n    }\n  },\n  watch: {\n    orderValue(newVal) {\n      this.getLeads(newVal);\n    }\n  }\n};","map":{"version":3,"names":["axios","LANGUAGE","data","orderItems","text","translate","value","orderValue","options","chart","toolbar","show","tools","download","animations","enabled","easing","speed","animateGradually","delay","dynamicAnimation","fontFamily","legend","markers","fillColors","theme","mode","stroke","width","colors","xaxis","type","categories","grid","strokeDashArray","yaxis","lines","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","fill","opacity","series","name","leads","user","created","getStatistics","getLeads","methods","word","wordIndex","forEach","lng","index","english","toLowerCase","$store","state","language","german","removeDuplicates","arr","filter","item","indexOf","orderType","get","then","response","agents_id","lead","push","user_id","filtered_agents_id","allUsers","length","new_completed","new_all_leads","new_not_completed","fai","findAgent","find","parseInt","id","undefined","findLeads","console","count","first_name","toString","completed","not_completed","status_id","$refs","apexChart","updateSeries","watch","newVal"],"sources":["src/components/Statistics/StatisticBarChart.vue"],"sourcesContent":["<template>\r\n    <v-row>\r\n      <v-col cols=\"12\" xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\r\n        <v-card class=\"stats pa-5\" outlined>\r\n          <v-subheader><h3>{{ translate('Perfomance of agents') }}</h3></v-subheader>\r\n          <div id=\"chart\">\r\n            <apexChart\r\n              height=\"350\"\r\n              ref=\"apexChart\"\r\n              type=\"bar\"\r\n              :options=\"options\"\r\n              :series=\"series\"\r\n            ></apexChart>\r\n            <div class=\"toolbar\">\r\n              <v-select\r\n                :items=\"orderItems\"\r\n                dense\r\n                outlined\r\n                v-model=\"orderValue\"\r\n              ></v-select>\r\n            </div>\r\n          </div>\r\n        </v-card>\r\n      </v-col>\r\n    </v-row>\r\n</template>\r\n\r\n  <script>\r\n  import axios from 'axios';\r\n  import * as LANGUAGE from '../../store/language.json';\r\n\r\n  export default {\r\n    data: function () {\r\n      return {\r\n        orderItems: [\r\n          { text: this.translate(\"Last week\"), value: 'week' },\r\n          { text: this.translate(\"Last month\"), value: \"month\" },\r\n          { text: this.translate(\"Last year\"), value: \"year\" },\r\n        ],\r\n        orderValue: \"month\",\r\n        options: {\r\n          chart: {\r\n            toolbar: {\r\n              show: true,\r\n              tools: {\r\n                download: false,\r\n              },\r\n            },\r\n            animations: {\r\n              enabled: true,\r\n              easing: \"easeinout\",\r\n              speed: 800,\r\n              animateGradually: {\r\n                enabled: true,\r\n                delay: 150,\r\n              },\r\n              dynamicAnimation: {\r\n                enabled: true,\r\n                speed: 350,\r\n              },\r\n            },\r\n            fontFamily: \"Lato, sans-serif\",\r\n          }, \r\n          legend: {\r\n            markers: {\r\n              fillColors: ['#1A1F3A', '#36A5DD', '#FE9210']\r\n            }\r\n          },\r\n          theme: {\r\n            mode: \"light\",\r\n          },\r\n          stroke: {\r\n            show: true,\r\n            width: 2,\r\n            colors: ['transparent']\r\n          },\r\n          xaxis: {\r\n            type: 'date',\r\n            categories: [\"Loading\"]\r\n          },\r\n          grid: {\r\n            strokeDashArray: 7,\r\n            yaxis: {\r\n              lines: {\r\n                show: true,\r\n              },\r\n            },\r\n          },\r\n          plotOptions: {\r\n            bar: {\r\n              horizontal: false,\r\n              columnWidth: '40%',\r\n              endingShape: 'rounded'\r\n            },\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n  \r\n          fill: {\r\n            opacity: 1,\r\n            colors: ['#1A1F3A', '#36A5DD', '#FE9210']\r\n          },\r\n        },\r\n        series: [{\r\n          name: 'Completed leads',\r\n          data: []\r\n        }, {\r\n          name: 'All leads',\r\n          data: []\r\n        }, {\r\n          name: 'Not completed',\r\n          data: []\r\n        }],\r\n        leads: [],\r\n        user: []\r\n      };\r\n    },\r\n\r\n    created(){\r\n      this.getStatistics();\r\n      this.getLeads();\r\n    },\r\n\r\n    methods: {\r\n      translate(word) {\r\n        let wordIndex = null;\r\n\r\n        LANGUAGE.forEach((lng, index) => {\r\n          if(lng.english.toLowerCase() == word.toLowerCase()) {\r\n            wordIndex = index;\r\n          }\r\n        });\r\n\r\n        if(wordIndex === null) {\r\n          return word;\r\n        }\r\n\r\n        if(this.$store.state.language == 'german') {\r\n          return LANGUAGE[wordIndex].german;\r\n        } else {\r\n          return LANGUAGE[wordIndex].english;\r\n        }\r\n      },\r\n      removeDuplicates(arr) {\r\n        return arr.filter((item, index) => arr.indexOf(item) === index);\r\n      },\r\n\r\n      getLeads(orderType = \"\"){\r\n        // this.$refs.apexChart.updateOptions({\r\n        //   xaxis: {\r\n        //     categories: [\"Loading\"] //ie [\"a\",\"b\",\"c\",\"d\"]\r\n        //   }\r\n        // });\r\n\r\n        axios\r\n          .get(`/get_all_leads?order=${orderType}`)\r\n          .then(response => {\r\n            const leads = response.data;\r\n\r\n            const agents_id = [];\r\n\r\n            leads.forEach(lead => {\r\n              agents_id.push(lead.user_id);\r\n            });\r\n\r\n            let filtered_agents_id = this.removeDuplicates(agents_id);\r\n\r\n            axios\r\n                 .get(\"/get_all_users\")\r\n                 .then(response => {\r\n                    const allUsers = response.data;\r\n\r\n                    this.options.xaxis.categories.length = 0;\r\n\r\n                    const new_completed = [];\r\n                    const new_all_leads = [];\r\n                    const new_not_completed = [];\r\n                    \r\n                    filtered_agents_id.forEach((fai, index) => {\r\n                      let findAgent = allUsers.find(user => parseInt(user.id) == parseInt(fai));\r\n                      if(findAgent == undefined) return;\r\n                      let findLeads = leads.filter(lead => lead.user_id == findAgent.id);\r\n\r\n                      if(findLeads.length != 0) {\r\n                        console.count(findLeads.length)\r\n                        findAgent.leads = findLeads;\r\n\r\n                        filtered_agents_id[index] = findAgent;\r\n                        this.options.xaxis.categories.push(findAgent.first_name.toString());\r\n\r\n                        let completed = 0;\r\n                        let not_completed = 0;\r\n\r\n\r\n                        findLeads.forEach((lead) => {\r\n                            if(lead.status_id == 15) {\r\n                              completed++;\r\n                            } else {\r\n                              not_completed++;\r\n                            }\r\n                        });\r\n\r\n                        new_completed.push(completed);\r\n                        new_all_leads.push(findLeads.length);\r\n                        new_not_completed.push(not_completed);\r\n                      }\r\n                    });\r\n\r\n                    this.$refs.apexChart.updateSeries([\r\n                        {name: this.translate('Completed'), data: new_completed},\r\n                        {name: this.translate('All leads'), data: new_all_leads},\r\n                        {name: this.translate('Not completed'), data: new_not_completed}\r\n                      ], false, true);\r\n                 })\r\n          });\r\n      },\r\n\r\n      getStatistics(){\r\n        // axios\r\n        //     .get('/statistics')\r\n        //     .then(response => console.log(response))\r\n        //     .catch(err => console.log(err))\r\n        // axios\r\n        //     .get('/leadstatistics')\r\n        //     .then(response => {\r\n        //       let filtered_leads = []\r\n\r\n        //       response.data.forEach(lead => {\r\n        //           if(lead.status != null && lead.status.id == 15) {\r\n        //             filtered_leads = lead;\r\n        //           }\r\n        //       });\r\n\r\n        //       console.log(filtered_leads)\r\n        //     })\r\n        //     .catch(err => console.log(err))\r\n      }\r\n    },\r\n    \r\n\r\n    watch: {\r\n      orderValue(newVal){\r\n        this.getLeads(newVal);\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .v-card.stats {\r\n    border-radius: 15px !important;\r\n    overflow: auto;\r\n    border: none;\r\n    padding: 45px;\r\n  }\r\n\r\n  .toolbar {\r\n    position: absolute;\r\n    top: 20px;\r\n    right: 20px;\r\n  }\r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}