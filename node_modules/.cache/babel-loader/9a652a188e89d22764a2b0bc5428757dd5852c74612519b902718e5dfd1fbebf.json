{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport * as LANGUAGE from '../../store/language.json';\nexport default {\n  name: \"StatisticsTopFive\",\n  props: [\"mode\"],\n  data() {\n    return {\n      agents: [],\n      current_agent: [],\n      options: {\n        chart: {\n          type: 'bar',\n          height: 350,\n          toolbar: {\n            show: false\n          }\n        },\n        plotOptions: {\n          bar: {\n            borderRadius: 4,\n            horizontal: true\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        xaxis: {\n          categories: [],\n          labels: {\n            style: {\n              colors: [this.$vuetify.theme.dark ? 'white' : \"black\"]\n            }\n          }\n        }\n      },\n      series: [{\n        data: []\n      }],\n      leads: []\n    };\n  },\n  watch: {\n    \"$vuetify.theme.dark\": {\n      handler(newVal) {\n        this.$refs.apexChart.updateOptions({\n          xaxis: {\n            labels: {\n              style: {\n                colors: [newVal ? 'white' : \"black\"]\n              }\n            }\n          }\n        });\n      },\n      deep: true\n    }\n  },\n  methods: {\n    translate(word) {\n      let wordIndex = null;\n      LANGUAGE.forEach((lng, index) => {\n        if (lng.english.toLowerCase() == word.toLowerCase()) {\n          wordIndex = index;\n        }\n      });\n      if (wordIndex === null) {\n        return word;\n      }\n      if (this.$store.state.language == 'german') {\n        return LANGUAGE[wordIndex].german;\n      } else {\n        return LANGUAGE[wordIndex].english;\n      }\n    }\n  },\n  created() {\n    axios.get('/get_filtered_billings').then(res => {\n      const billings = res.data.billing;\n\n      // grouping people\n      const agents = [];\n      billings.forEach(bill => {\n        const exists = agents.find(a => a.id = bill.user_id);\n        if (!exists) {\n          let commission_sum = 0;\n          billings.forEach(b => {\n            if (b.user_id == bill.user_id) {\n              commission_sum += parseInt(b.commission);\n            }\n          });\n          let info = {\n            commission_sum,\n            user: bill.user\n          };\n          agents.push(info);\n        }\n      });\n      const sum_data = [];\n      agents.forEach(ag => {\n        this.options.xaxis.categories.push(`${ag.user.first_name} ${ag.user.last_name}`);\n        sum_data.push(ag.commission_sum);\n      });\n      this.$refs.apexChart.updateSeries([{\n        data: [...sum_data]\n      }], false, true);\n      this.agents = agents;\n    });\n  }\n};","map":{"version":3,"names":["axios","LANGUAGE","name","props","data","agents","current_agent","options","chart","type","height","toolbar","show","plotOptions","bar","borderRadius","horizontal","dataLabels","enabled","xaxis","categories","labels","style","colors","$vuetify","theme","dark","series","leads","watch","handler","newVal","$refs","apexChart","updateOptions","deep","methods","translate","word","wordIndex","forEach","lng","index","english","toLowerCase","$store","state","language","german","created","get","then","res","billings","billing","bill","exists","find","a","id","user_id","commission_sum","b","parseInt","commission","info","user","push","sum_data","ag","first_name","last_name","updateSeries"],"sources":["src/components/Statistics/StatisticsTopFive.vue"],"sourcesContent":["<template>\r\n    <v-row>\r\n      <v-col cols=\"12\" xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\r\n        <v-card class=\"stats pa-5\" outlined>\r\n          <v-subheader><h3>{{ translate('Top month performers') }}</h3></v-subheader>\r\n          <div id=\"chart\">\r\n            <apexChart\r\n              width=\"100%\"\r\n              height=\"200\"\r\n              ref=\"apexChart\"\r\n              type=\"bar\"\r\n              :options=\"options\"\r\n              :series=\"series\"\r\n            ></apexChart>\r\n          </div>\r\n        </v-card>\r\n      </v-col>\r\n    </v-row>\r\n</template>\r\n\r\n<script>\r\n    import axios from 'axios';\r\n    import * as LANGUAGE from '../../store/language.json';\r\n\r\n    export default {\r\n        name: \"StatisticsTopFive\",\r\n        props: [\"mode\"],\r\n        data(){return {\r\n          agents: [],\r\n          current_agent: [],\r\n          options: {\r\n            \r\n            chart: {\r\n              type: 'bar',\r\n              height: 350,\r\n              toolbar: {\r\n                show: false\r\n              }\r\n            },\r\n            plotOptions: {\r\n              bar: {\r\n                borderRadius: 4,\r\n                horizontal: true,\r\n              }\r\n            },\r\n            dataLabels: {\r\n              enabled: false,\r\n            },\r\n            xaxis: {\r\n              categories: [],\r\n              labels: {\r\n                style: {\r\n                  colors: [this.$vuetify.theme.dark ? 'white': \"black\"]\r\n                }\r\n              }\r\n            }\r\n          },\r\n          series: [{\r\n            data: []\r\n          }],\r\n          leads: []\r\n        }},\r\n        watch: {\r\n          \"$vuetify.theme.dark\": {\r\n            handler(newVal){\r\n              this.$refs.apexChart.updateOptions({\r\n                xaxis: {\r\n                  labels: {\r\n                    style: {\r\n                      colors: [newVal ? 'white': \"black\"]\r\n                    }\r\n                  }\r\n                },\r\n              })\r\n            },\r\n            deep: true\r\n          }\r\n        },\r\n        methods: {\r\n            translate(word) {\r\n                let wordIndex = null;\r\n\r\n                LANGUAGE.forEach((lng, index) => {\r\n                if(lng.english.toLowerCase() == word.toLowerCase()) {\r\n                    wordIndex = index;\r\n                }\r\n                });\r\n\r\n                if(wordIndex === null) {\r\n                return word;\r\n                }\r\n\r\n                if(this.$store.state.language == 'german') {\r\n                return LANGUAGE[wordIndex].german;\r\n                } else {\r\n                return LANGUAGE[wordIndex].english;\r\n                }\r\n            },\r\n        },\r\n        created() {\r\n            axios\r\n                .get('/get_filtered_billings')\r\n                .then(res => {\r\n                    const billings = res.data.billing;\r\n\r\n                    // grouping people\r\n                    const agents = [];\r\n\r\n                    billings.forEach(bill => {\r\n                        const exists = agents.find(a => a.id = bill.user_id);\r\n\r\n                        if(!exists) {\r\n                            let commission_sum = 0;\r\n\r\n                            billings.forEach(b => {\r\n                                if(b.user_id == bill.user_id) {\r\n                                    commission_sum += parseInt(b.commission);\r\n                                }\r\n                            });\r\n\r\n                            let info = {\r\n                                commission_sum,\r\n                                user: bill.user\r\n                            };\r\n\r\n                            agents.push(info)\r\n                        }\r\n                    });\r\n\r\n                    const sum_data = [];\r\n\r\n                    agents.forEach((ag) => {\r\n                        this.options.xaxis.categories.push(`${ag.user.first_name} ${ag.user.last_name}`);\r\n                        sum_data.push(ag.commission_sum);\r\n                    });\r\n\r\n                    this.$refs.apexChart.updateSeries([\r\n                        {data: [...sum_data]},\r\n                    ], false, true);\r\n\r\n                    this.agents = agents;\r\n                });\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .v-card.stats {\r\n        border-radius: 15px !important;\r\n        overflow: auto;\r\n        border: none;\r\n        padding: 20px;\r\n    }\r\n    .toolbar {\r\n      position: absolute;\r\n      top: 20px;\r\n      right: 20px;\r\n    }\r\n</style>"],"mappings":";AAqBA,OAAAA,KAAA;AACA,YAAAC,QAAA;AAEA;EACAC,IAAA;EACAC,KAAA;EACAC,KAAA;IAAA;MACAC,MAAA;MACAC,aAAA;MACAC,OAAA;QAEAC,KAAA;UACAC,IAAA;UACAC,MAAA;UACAC,OAAA;YACAC,IAAA;UACA;QACA;QACAC,WAAA;UACAC,GAAA;YACAC,YAAA;YACAC,UAAA;UACA;QACA;QACAC,UAAA;UACAC,OAAA;QACA;QACAC,KAAA;UACAC,UAAA;UACAC,MAAA;YACAC,KAAA;cACAC,MAAA,QAAAC,QAAA,CAAAC,KAAA,CAAAC,IAAA;YACA;UACA;QACA;MACA;MACAC,MAAA;QACAvB,IAAA;MACA;MACAwB,KAAA;IACA;EAAA;EACAC,KAAA;IACA;MACAC,QAAAC,MAAA;QACA,KAAAC,KAAA,CAAAC,SAAA,CAAAC,aAAA;UACAf,KAAA;YACAE,MAAA;cACAC,KAAA;gBACAC,MAAA,GAAAQ,MAAA;cACA;YACA;UACA;QACA;MACA;MACAI,IAAA;IACA;EACA;EACAC,OAAA;IACAC,UAAAC,IAAA;MACA,IAAAC,SAAA;MAEAtC,QAAA,CAAAuC,OAAA,EAAAC,GAAA,EAAAC,KAAA;QACA,IAAAD,GAAA,CAAAE,OAAA,CAAAC,WAAA,MAAAN,IAAA,CAAAM,WAAA;UACAL,SAAA,GAAAG,KAAA;QACA;MACA;MAEA,IAAAH,SAAA;QACA,OAAAD,IAAA;MACA;MAEA,SAAAO,MAAA,CAAAC,KAAA,CAAAC,QAAA;QACA,OAAA9C,QAAA,CAAAsC,SAAA,EAAAS,MAAA;MACA;QACA,OAAA/C,QAAA,CAAAsC,SAAA,EAAAI,OAAA;MACA;IACA;EACA;EACAM,QAAA;IACAjD,KAAA,CACAkD,GAAA,2BACAC,IAAA,CAAAC,GAAA;MACA,MAAAC,QAAA,GAAAD,GAAA,CAAAhD,IAAA,CAAAkD,OAAA;;MAEA;MACA,MAAAjD,MAAA;MAEAgD,QAAA,CAAAb,OAAA,CAAAe,IAAA;QACA,MAAAC,MAAA,GAAAnD,MAAA,CAAAoD,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,EAAA,GAAAJ,IAAA,CAAAK,OAAA;QAEA,KAAAJ,MAAA;UACA,IAAAK,cAAA;UAEAR,QAAA,CAAAb,OAAA,CAAAsB,CAAA;YACA,IAAAA,CAAA,CAAAF,OAAA,IAAAL,IAAA,CAAAK,OAAA;cACAC,cAAA,IAAAE,QAAA,CAAAD,CAAA,CAAAE,UAAA;YACA;UACA;UAEA,IAAAC,IAAA;YACAJ,cAAA;YACAK,IAAA,EAAAX,IAAA,CAAAW;UACA;UAEA7D,MAAA,CAAA8D,IAAA,CAAAF,IAAA;QACA;MACA;MAEA,MAAAG,QAAA;MAEA/D,MAAA,CAAAmC,OAAA,CAAA6B,EAAA;QACA,KAAA9D,OAAA,CAAAY,KAAA,CAAAC,UAAA,CAAA+C,IAAA,IAAAE,EAAA,CAAAH,IAAA,CAAAI,UAAA,IAAAD,EAAA,CAAAH,IAAA,CAAAK,SAAA;QACAH,QAAA,CAAAD,IAAA,CAAAE,EAAA,CAAAR,cAAA;MACA;MAEA,KAAA7B,KAAA,CAAAC,SAAA,CAAAuC,YAAA,EACA;QAAApE,IAAA,MAAAgE,QAAA;MAAA,EACA;MAEA,KAAA/D,MAAA,GAAAA,MAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}