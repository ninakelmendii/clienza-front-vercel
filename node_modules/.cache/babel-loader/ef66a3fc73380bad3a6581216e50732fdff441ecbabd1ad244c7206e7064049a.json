{"ast":null,"code":"import axios from 'axios';\nimport * as LANGUAGE from '../../store/language.json';\nimport SnackBar from \"../Snackbar/SnackBar.vue\";\nexport default {\n  data() {\n    return {\n      snackbar: {\n        show: false,\n        message: \"\",\n        color: null\n      },\n      behandlung: {\n        text: ''\n      }\n    };\n  },\n  props: ['close', 'item'],\n  methods: {\n    showSnackBar(text, error) {\n      this.snackbar = {\n        message: text,\n        color: error,\n        error: error ? true : false\n      };\n      this.$refs.snackbar.toggleSnackbar(true);\n    },\n    translate(word) {\n      let wordIndex = null;\n      LANGUAGE.forEach((lng, index) => {\n        if (lng.english.toLowerCase() == word.toLowerCase()) {\n          wordIndex = index;\n        }\n      });\n      if (wordIndex === null) {\n        return word;\n      }\n      if (this.$store.state.language == 'german') {\n        return LANGUAGE[wordIndex].german;\n      } else {\n        return LANGUAGE[wordIndex].english;\n      }\n    },\n    submit() {\n      if (this.behandlung.text === '') {\n        this.showSnackBar(this.translate('Please fill in the note field'), true);\n        return false;\n      }\n      const formData = new FormData();\n      formData.append(\"note\", this.behandlung.text);\n      axios.post(`/feedback/note/${this.$route.params.id}`, formData).then(response => {\n        if (response.data) {\n          this.close();\n          this.showSnackBar(this.translate(\"Success\"), false);\n        }\n      }).catch(error => {\n        this.showSnackBar(error.response.data.message, true);\n      });\n    },\n    getItem() {\n      if (this.item.recordNote) {\n        this.behandlung.text = this.item.recordNote;\n      }\n    }\n  },\n  mounted() {\n    this.getItem();\n  },\n  components: {\n    SnackBar\n  }\n};","map":{"version":3,"names":["axios","LANGUAGE","SnackBar","data","snackbar","show","message","color","behandlung","text","props","methods","showSnackBar","error","$refs","toggleSnackbar","translate","word","wordIndex","forEach","lng","index","english","toLowerCase","$store","state","language","german","submit","formData","FormData","append","post","$route","params","id","then","response","close","catch","getItem","item","recordNote","mounted","components"],"sources":["src/components/Dialogs/BehandlungDialog.vue"],"sourcesContent":["<template>\n    <v-container>\n      <v-row>\n        <SnackBar :data=\"snackbar\" ref=\"snackbar\"></SnackBar>\n        <v-col cols=\"12\" md=\"12\" lg=\"12\" style=\"padding: 0;\">\n          <v-card>\n              <v-row>\n                  <v-col cols=\"12\" md=\"12\" class=\"d-flex align-center\">\n                      <h2 style=\"display: flex; align-items: center;\">{{ translate('Enter Note') }}:</h2>\n                  </v-col>\n              </v-row>\n  \n              <v-card-text>\n                  <v-container>\n                      <v-row>\n                          <v-col cols=\"12\" sm=\"12\" md=\"12\">\n                            <v-textarea\n                              :label=\"translate('Describe type of disease')\"\n                              outlined\n                              v-model=\"behandlung.text\"\n                            ></v-textarea>\n                          </v-col>\n                      </v-row>\n                  </v-container>\n              </v-card-text>\n              <v-card-actions>\n                <v-spacer></v-spacer>\n                <v-btn color=\"blue darken-1\" text @click=\"close\">\n                  {{ translate('Cancel') }}\n                </v-btn>\n\n                <v-btn\n                  color=\"blue darken-1\"\n                  text\n                  @click=\"submit\"\n                >\n                  {{translate(\"Create\")}}\n                </v-btn>\n              </v-card-actions>\n          </v-card>\n        </v-col>\n      </v-row>\n    </v-container>\n  </template>\n  \n  <script>\n  import axios from 'axios';\nimport * as LANGUAGE from '../../store/language.json';\n  import SnackBar from \"../Snackbar/SnackBar.vue\";\n  \n  export default {\n    data() {\n      return {\n        snackbar: {\n          show: false,\n          message: \"\",\n          color: null,\n        },\n        behandlung: {\n          text: '',\n        }\n      };\n    },\n    props: ['close', 'item'],\n    methods: {\n      showSnackBar(text,error) {\n        this.snackbar = {\n            message: text,\n            color: error,\n            error: error ? true : false,\n          };\n          this.$refs.snackbar.toggleSnackbar(true);\n      },\n      translate(word) {\n        let wordIndex = null;\n  \n        LANGUAGE.forEach((lng, index) => {\n          if(lng.english.toLowerCase() == word.toLowerCase()) {\n            wordIndex = index;\n          }\n        });\n  \n        if(wordIndex === null) {\n          return word;\n        }\n  \n        if(this.$store.state.language == 'german') {\n          return LANGUAGE[wordIndex].german;\n        } else {\n          return LANGUAGE[wordIndex].english;\n        }\n      },\n      submit() {\n        if(this.behandlung.text === '') {\n          this.showSnackBar(this.translate('Please fill in the note field'), true)\n          return false;\n        }\n        const formData = new FormData();\n        formData.append(\"note\", this.behandlung.text);\n        axios\n          .post(`/feedback/note/${this.$route.params.id}`, formData)\n          .then((response) => {\n            if(response.data) {\n              this.close();\n              this.showSnackBar(this.translate(\"Success\"), false)\n            }\n          })\n          .catch((error) => {\n            this.showSnackBar(error.response.data.message, true)\n          });\n      },\n      getItem() {\n        if(this.item.recordNote) {\n          this.behandlung.text = this.item.recordNote;\n        }\n      }\n    },\n    mounted() {\n      this.getItem();\n    },\n    components: { SnackBar },\n  };\n  </script>\n  \n<style scoped>\n    .v-card {\n        overflow: hidden;\n    }\n    h2 {\n        font-family: \"PT Sans\", sans-serif;\n        margin: 30px auto 0;\n    }\n</style>\n"],"mappings":"AA8CA,OAAAA,KAAA;AACA,YAAAC,QAAA;AACA,OAAAC,QAAA;AAEA;EACAC,KAAA;IACA;MACAC,QAAA;QACAC,IAAA;QACAC,OAAA;QACAC,KAAA;MACA;MACAC,UAAA;QACAC,IAAA;MACA;IACA;EACA;EACAC,KAAA;EACAC,OAAA;IACAC,aAAAH,IAAA,EAAAI,KAAA;MACA,KAAAT,QAAA;QACAE,OAAA,EAAAG,IAAA;QACAF,KAAA,EAAAM,KAAA;QACAA,KAAA,EAAAA,KAAA;MACA;MACA,KAAAC,KAAA,CAAAV,QAAA,CAAAW,cAAA;IACA;IACAC,UAAAC,IAAA;MACA,IAAAC,SAAA;MAEAjB,QAAA,CAAAkB,OAAA,EAAAC,GAAA,EAAAC,KAAA;QACA,IAAAD,GAAA,CAAAE,OAAA,CAAAC,WAAA,MAAAN,IAAA,CAAAM,WAAA;UACAL,SAAA,GAAAG,KAAA;QACA;MACA;MAEA,IAAAH,SAAA;QACA,OAAAD,IAAA;MACA;MAEA,SAAAO,MAAA,CAAAC,KAAA,CAAAC,QAAA;QACA,OAAAzB,QAAA,CAAAiB,SAAA,EAAAS,MAAA;MACA;QACA,OAAA1B,QAAA,CAAAiB,SAAA,EAAAI,OAAA;MACA;IACA;IACAM,OAAA;MACA,SAAApB,UAAA,CAAAC,IAAA;QACA,KAAAG,YAAA,MAAAI,SAAA;QACA;MACA;MACA,MAAAa,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,cAAAvB,UAAA,CAAAC,IAAA;MACAT,KAAA,CACAgC,IAAA,wBAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA,IAAAN,QAAA,EACAO,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAlC,IAAA;UACA,KAAAmC,KAAA;UACA,KAAA1B,YAAA,MAAAI,SAAA;QACA;MACA,GACAuB,KAAA,CAAA1B,KAAA;QACA,KAAAD,YAAA,CAAAC,KAAA,CAAAwB,QAAA,CAAAlC,IAAA,CAAAG,OAAA;MACA;IACA;IACAkC,QAAA;MACA,SAAAC,IAAA,CAAAC,UAAA;QACA,KAAAlC,UAAA,CAAAC,IAAA,QAAAgC,IAAA,CAAAC,UAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAH,OAAA;EACA;EACAI,UAAA;IAAA1C;EAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}