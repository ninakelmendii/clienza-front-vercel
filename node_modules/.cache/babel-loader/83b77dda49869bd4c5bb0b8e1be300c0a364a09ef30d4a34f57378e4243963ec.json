{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport * as LANGUAGE from '../../store/language.json';\nexport default {\n  data: function () {\n    return {\n      series: [],\n      chartOptions: {\n        labels: [],\n        dataLabels: {\n          enabled: false\n        },\n        responsive: [{\n          breakpoint: 480,\n          options: {\n            chart: {\n              width: 200\n            },\n            legend: {\n              show: false\n            }\n          }\n        }],\n        legend: {\n          position: \"right\",\n          offsetY: 0,\n          height: \"100%\",\n          horizontalAlign: 'left'\n        }\n      },\n      lang_list: [],\n      canton_list: [],\n      source_list: [],\n      selected_lang: '',\n      selected_canton: '',\n      selected_source: ''\n    };\n  },\n  methods: {\n    // getPieChartData() {\n    //   axios\n    //     .get(\"/sale/statistic\" , {\n    //       params: {\n    //         lang: this.selected_lang,\n    //         canton_id: this.selected_canton,\n    //         source: this.selected_source\n    //       }\n    //     })\n    //     .then((response) => {\n    //       for (\n    //         let $i = 0;\n    //         response.data.data.distribution_by_category.length > 0;\n    //         $i++\n    //       ) {\n    //         this.chartOptions.labels.push(\n    //           response.data.data.distribution_by_category[$i].status\n    //         );\n    //         this.series.push(\n    //           parseInt(response.data.data.distribution_by_category[$i].total)\n    //         );\n    //       }\n\n    //       this.$refs.realtimeChart.updateSeries([{\n    //         data: this.series,\n    //       }], false, true);\n\n    //     })\n    //     .catch((error) => {\n    //       console.log(error);\n    //     });\n    // },\n\n    getLangSelect() {\n      axios.get(\"/languages\").then(response => {\n        for (const [key, value] of Object.entries(response.data)) {\n          this.lang_list.push({\n            text: value,\n            value: key\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    getSourceSelect() {\n      axios.get(\"/sources\").then(response => {\n        for (let $i = 0; response.data.data.length > 0; $i++) {\n          this.source_list.push({\n            text: response.data.data[$i].name,\n            value: response.data.data[$i].id\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    getCantonSelect() {\n      axios.get(\"/canton\").then(response => {\n        for (let $i = 0; response.data.length > 0; $i++) {\n          this.canton_list.push({\n            text: response.data[$i].name,\n            value: response.data[$i].id\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    getStatisticsByStatus() {\n      axios.get('/leadstatistics').then(response => {\n        console.log(response.data);\n        const statistics = response.data;\n\n        // Finding the new lead index in array\n        statistics.forEach((stat, index) => {\n          if (stat.status != undefined && stat.status.id == 1) {\n            const removeIndexs = [];\n            statistics.forEach((undefinedStat, undefinedIndex) => {\n              if (undefinedStat.status == null) {\n                removeIndexs.push(undefinedIndex);\n                statistics[index].percentage += undefinedStat.percentage;\n                statistics[index].total = `${parseInt(statistics[index].total) + parseInt(undefinedStat.total)}`;\n              }\n            });\n            removeIndexs.forEach(ri => {\n              statistics.splice(ri, 1);\n            });\n            return;\n          }\n        });\n        statistics.forEach(status => {\n          this.series.push(parseInt(status.total));\n          if (status.status) {\n            this.chartOptions.labels.push(this.translate(status.status.en));\n          } else {\n            this.chartOptions.labels.push('Undefined');\n          }\n        });\n      }).catch(err => console.log(err));\n    },\n    translate(word) {\n      let wordIndex = null;\n      LANGUAGE.forEach((lng, index) => {\n        if (lng.english.toLowerCase() == word.toLowerCase()) {\n          wordIndex = index;\n        }\n      });\n      if (wordIndex === null) {\n        return word;\n      }\n      if (this.$store.state.language == 'german') {\n        return LANGUAGE[wordIndex].german;\n      } else {\n        return LANGUAGE[wordIndex].english;\n      }\n    }\n  },\n  watch: {\n    selected_lang: function (val) {\n      console.log(val);\n      this.getPieChartData();\n    },\n    selected_canton: function (val) {\n      console.log(val);\n      this.getPieChartData();\n    },\n    selected_source: function (val) {\n      console.log(val);\n      this.getPieChartData();\n    }\n  },\n  mounted() {\n    this.getLangSelect();\n    this.getSourceSelect();\n    this.getCantonSelect();\n    // this.getPieChartData();\n    this.getStatisticsByStatus();\n  }\n};","map":{"version":3,"names":["axios","LANGUAGE","data","series","chartOptions","labels","dataLabels","enabled","responsive","breakpoint","options","chart","width","legend","show","position","offsetY","height","horizontalAlign","lang_list","canton_list","source_list","selected_lang","selected_canton","selected_source","methods","getLangSelect","get","then","response","key","value","Object","entries","push","text","catch","error","console","log","getSourceSelect","$i","length","name","id","getCantonSelect","getStatisticsByStatus","statistics","forEach","stat","index","status","undefined","removeIndexs","undefinedStat","undefinedIndex","percentage","total","parseInt","ri","splice","translate","en","err","word","wordIndex","lng","english","toLowerCase","$store","state","language","german","watch","val","getPieChartData","mounted"],"sources":["src/components/Statistics/StatisticsChart.vue"],"sourcesContent":["<template>\r\n  <v-row>\r\n    <v-col cols=\"12\" md=\"12\" lg=\"12\">\r\n      <v-card outlined rounded class=\"chart-card stats\">\r\n        <v-subheader><h3>{{ translate(\"Leads status information\") }}</h3></v-subheader>\r\n        <div id=\"chart\" class=\"d-flex justify-center\">\r\n          <ApexChart\r\n            height=\"350\"\r\n            ref=\"realtimeChart\"\r\n            type=\"donut\"\r\n            width=\"590\"\r\n            :options=\"chartOptions\"\r\n            :series=\"series\"\r\n          />\r\n        </div>\r\n      </v-card>\r\n    </v-col>\r\n  </v-row>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport * as LANGUAGE from '../../store/language.json';\r\n\r\nexport default {\r\n  data: function () {\r\n    return {\r\n      series: [],\r\n      chartOptions: {\r\n        labels: [],\r\n        dataLabels: {\r\n          enabled: false,\r\n        },\r\n        responsive: [\r\n          {\r\n            breakpoint: 480,\r\n            options: {\r\n              chart: {\r\n                width: 200,\r\n              },\r\n              legend: {\r\n                show: false,\r\n              },\r\n            },\r\n          },\r\n        ],\r\n        legend: {\r\n          position: \"right\",\r\n          offsetY: 0,\r\n          height: \"100%\",\r\n          horizontalAlign: 'left'\r\n        },\r\n      },\r\n\r\n      lang_list: [],\r\n      canton_list: [],\r\n      source_list: [],\r\n\r\n      selected_lang: '',\r\n      selected_canton: '',\r\n      selected_source: ''\r\n    };\r\n  },\r\n  methods: {\r\n    // getPieChartData() {\r\n    //   axios\r\n    //     .get(\"/sale/statistic\" , {\r\n    //       params: {\r\n    //         lang: this.selected_lang,\r\n    //         canton_id: this.selected_canton,\r\n    //         source: this.selected_source\r\n    //       }\r\n    //     })\r\n    //     .then((response) => {\r\n    //       for (\r\n    //         let $i = 0;\r\n    //         response.data.data.distribution_by_category.length > 0;\r\n    //         $i++\r\n    //       ) {\r\n    //         this.chartOptions.labels.push(\r\n    //           response.data.data.distribution_by_category[$i].status\r\n    //         );\r\n    //         this.series.push(\r\n    //           parseInt(response.data.data.distribution_by_category[$i].total)\r\n    //         );\r\n    //       }\r\n\r\n    //       this.$refs.realtimeChart.updateSeries([{\r\n    //         data: this.series,\r\n    //       }], false, true);\r\n\r\n    //     })\r\n    //     .catch((error) => {\r\n    //       console.log(error);\r\n    //     });\r\n    // },\r\n\r\n    getLangSelect() {\r\n      axios\r\n          .get(\"/languages\")\r\n          .then((response) => {\r\n\r\n            for (const [key, value] of Object.entries(response.data)) {\r\n              this.lang_list.push({\r\n                text: value,\r\n                value: key,\r\n              });\r\n            }\r\n\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n    },\r\n\r\n    getSourceSelect() {\r\n      axios\r\n          .get(\"/sources\")\r\n          .then((response) => {\r\n\r\n            for (let $i = 0; response.data.data.length > 0; $i++) {\r\n\r\n              this.source_list.push({\r\n                text: response.data.data[$i].name,\r\n                value: response.data.data[$i].id,\r\n              });\r\n\r\n            }\r\n\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n    },\r\n\r\n    getCantonSelect() {\r\n      axios\r\n          .get(\"/canton\")\r\n          .then((response) => {\r\n\r\n            for (let $i = 0; response.data.length > 0; $i++) {\r\n\r\n              this.canton_list.push({\r\n                text: response.data[$i].name,\r\n                value: response.data[$i].id,\r\n              });\r\n\r\n            }\r\n\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n    },\r\n\r\n    getStatisticsByStatus(){\r\n      axios\r\n          .get('/leadstatistics')\r\n          .then(response => {\r\n            console.log(response.data);\r\n            const statistics = response.data;\r\n\r\n            // Finding the new lead index in array\r\n            statistics.forEach((stat, index) => {\r\n              if(stat.status != undefined && stat.status.id == 1) {\r\n                const removeIndexs = [];\r\n\r\n                statistics.forEach((undefinedStat, undefinedIndex) => {\r\n                  if(undefinedStat.status == null) {\r\n                    removeIndexs.push(undefinedIndex);\r\n                    statistics[index].percentage += undefinedStat.percentage;\r\n                    statistics[index].total = `${parseInt(statistics[index].total) + parseInt(undefinedStat.total)}`;\r\n                  }\r\n                });\r\n\r\n                removeIndexs.forEach(ri => {\r\n                  statistics.splice(ri, 1);\r\n                })\r\n                return;\r\n              }\r\n            });\r\n\r\n            \r\n            statistics.forEach(status => {\r\n              this.series.push(parseInt(status.total));\r\n\r\n              if(status.status) {\r\n                this.chartOptions.labels.push(this.translate(status.status.en))\r\n              } else {\r\n                this.chartOptions.labels.push('Undefined')\r\n              }\r\n\r\n            });\r\n\r\n          })\r\n          .catch(err => console.log(err));\r\n    },\r\n\r\n    translate(word) {\r\n      let wordIndex = null;\r\n\r\n      LANGUAGE.forEach((lng, index) => {\r\n        if(lng.english.toLowerCase() == word.toLowerCase()) {\r\n          wordIndex = index;\r\n        }\r\n      });\r\n\r\n      if(wordIndex === null) {\r\n        return word;\r\n      }\r\n\r\n      if(this.$store.state.language == 'german') {\r\n        return LANGUAGE[wordIndex].german;\r\n      } else {\r\n        return LANGUAGE[wordIndex].english;\r\n      }\r\n    },\r\n\r\n  },\r\n\r\n  watch: {\r\n    selected_lang: function (val) {\r\n      console.log(val)\r\n      this.getPieChartData()\r\n    },\r\n\r\n    selected_canton: function (val) {\r\n      console.log(val)\r\n      this.getPieChartData()\r\n    },\r\n\r\n    selected_source: function (val) {\r\n      console.log(val)\r\n      this.getPieChartData()\r\n    },\r\n\r\n  },\r\n\r\n  mounted() {\r\n    this.getLangSelect();\r\n    this.getSourceSelect();\r\n    this.getCantonSelect();\r\n    // this.getPieChartData();\r\n    this.getStatisticsByStatus();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.v-card.stats {\r\n    border-radius: 15px !important;\r\n    overflow: auto;\r\n    border: none;\r\n    padding: 20px;\r\n  }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}