{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport * as LANGUAGE from '../../store/language.json';\nimport SnackBar from \"../Snackbar/SnackBar.vue\";\nimport StatsCard from \"../Dashboard/StatsCard.vue\";\nexport default {\n  data() {\n    return {\n      user: [],\n      default_values: {\n        user: {}\n      },\n      image: null,\n      stats: [{\n        id: 1,\n        title: this.translate(\"Points Earned\"),\n        counter: 12\n      }, {\n        id: 2,\n        title: this.translate(\"Callbacks\"),\n        counter: 4\n      }, {\n        id: 3,\n        title: this.translate(\"Pending Issues\"),\n        counter: 6\n      }, {\n        id: 4,\n        title: this.translate(\"Total Leads\"),\n        counter: 409\n      }],\n      menu: false,\n      snackbar: {\n        show: false,\n        message: \"\",\n        error: false\n      }\n    };\n  },\n  methods: {\n    profile_img(img) {\n      this.image = img;\n      this.profile_image_update(img);\n    },\n    profile_image_update(image = undefined) {\n      let new_image = this.image;\n      if (image) {\n        new_image = image;\n      }\n      return new Promise((resolve, reject) => {\n        axios.post(\"profile_img\", {\n          image: new_image\n        }, {\n          headers: {\n            'Content-type': 'multipart/form-data'\n          }\n        }).then(response => {\n          if (image) {\n            this.snackbar = {\n              message: \"Data updated successfully\",\n              error: false\n            };\n            this.$refs.snackbar.toggleSnackbar();\n          }\n          this.$store.dispatch('getImage');\n          resolve(response.data.message);\n        }).catch(err => {\n          if (image) {\n            const filteredErr = err.response.data.message.replace(\"2048 kilobytes\", \"2MB\");\n            this.snackbar = {\n              message: filteredErr,\n              error: true\n            };\n            this.$refs.snackbar.toggleSnackbar();\n          }\n          reject(err.response.data.message);\n        });\n      });\n    },\n    translate(word) {\n      let wordIndex = null;\n      LANGUAGE.forEach((lng, index) => {\n        if (lng.english.toLowerCase() == word.toLowerCase()) {\n          wordIndex = index;\n        }\n      });\n      if (wordIndex === null) {\n        return word;\n      }\n      if (this.$store.state.language == 'german') {\n        return LANGUAGE[wordIndex].german;\n      } else {\n        return LANGUAGE[wordIndex].english;\n      }\n    },\n    exitApp() {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n      this.$router.push(\"/login\");\n    },\n    async updateUser() {\n      if (this.image) {\n        let updated = true;\n        try {\n          await this.profile_image_update();\n          this.$store.dispatch(\"getImage\");\n        } catch (err) {\n          const filteredErr = err.replace(\"2048 kilobytes\", \"2MB\");\n          this.snackbar = {\n            message: filteredErr,\n            error: true\n          };\n          this.$refs.snackbar.toggleSnackbar();\n          updated = false;\n        }\n        if (!updated) return;\n      }\n\n      // let userInfo = this.user;\n      // if(val) {\n      //   userInfo = val;\n      // }\n\n      // console.log(\"nah\", this.user);\n\n      axios.put(\"/user/update\", this.user).then(response => {\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        this.snackbar = {\n          message: \"Data updated successfully\",\n          error: false\n        };\n        this.$refs.snackbar.toggleSnackbar();\n      }).catch(error => {\n        console.log(error);\n        let err = error.response.data.message.replace(\"(and 2 more errors)\", \"\").replace(\"(and 1 more error)\", \"\").trim();\n        this.snackbar = {\n          message: err,\n          error: true\n        };\n        this.$refs.snackbar.toggleSnackbar();\n      });\n    }\n  },\n  mounted() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    if (user) {\n      this.user = user;\n    }\n  },\n  watch: {\n    // user: {\n    //   handler(newValue) {\n    //     this.updateUser(newValue);\n    //   },\n    //   deep: true,\n    // }\n  },\n  components: {\n    SnackBar,\n    StatsCard\n  }\n};","map":{"version":3,"names":["axios","LANGUAGE","SnackBar","StatsCard","data","user","default_values","image","stats","id","title","translate","counter","menu","snackbar","show","message","error","methods","profile_img","img","profile_image_update","undefined","new_image","Promise","resolve","reject","post","headers","then","response","$refs","toggleSnackbar","$store","dispatch","catch","err","filteredErr","replace","word","wordIndex","forEach","lng","index","english","toLowerCase","state","language","german","exitApp","localStorage","removeItem","$router","push","updateUser","updated","put","setItem","JSON","stringify","console","log","trim","mounted","parse","getItem","watch","components"],"sources":["src/components/Profile/ProfileCards.vue"],"sourcesContent":["<template>\r\n  <v-row>\r\n    <SnackBar :data=\"snackbar\" ref=\"snackbar\"></SnackBar>\r\n    <v-col cols=\"12\" xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\">\r\n      <v-card outlined class=\"profile-card\">\r\n        <div class=\"d-flex justify-center\">\r\n          <label>\r\n            <v-avatar class=\"mt-10 mb-5\" size=\"92\">\r\n              <v-img\r\n                :src=\"$store.state.profileImage.img_path || require('@/assets/images/guest_profile_pic.png')\"\r\n                alt=\"asdasd\"\r\n              ></v-img>\r\n            </v-avatar>\r\n            <v-file-input type=\"file\" name=\"image\" accept=\"image/*\" class=\"d-none\" @change=\"profile_img\"></v-file-input>\r\n          </label>\r\n        </div>\r\n        <v-form>\r\n          <v-col cols=\"12\">\r\n            <!-- <v-select filled rounded :label=\"translate('Role')\"></v-select> -->\r\n            <v-text-field\r\n              filled\r\n              rounded\r\n              v-model=\"user.first_name\"\r\n              class=\"inp\"\r\n            >\r\n            <template v-slot:label>\r\n              <span :class=\"$vuetify.theme.dark ? 'label-dark' : 'label'\">{{translate('First Name')}}</span>\r\n            </template>\r\n          </v-text-field>\r\n            <v-text-field\r\n              filled\r\n              rounded\r\n              v-model=\"user.last_name\"\r\n            >\r\n            <template v-slot:label>\r\n              <span :class=\"$vuetify.theme.dark ? 'label-dark' : 'label'\">{{translate('Last Name')}}</span>\r\n            </template>\r\n          </v-text-field>\r\n\r\n            <v-text-field\r\n              filled\r\n              rounded\r\n              :label=\"translate('Email')\"\r\n              v-model=\"user.email\"\r\n            ></v-text-field>\r\n            <v-text-field\r\n                filled\r\n                type=\"password\"\r\n                rounded\r\n                v-model=\"user.password\"\r\n            >\r\n            <template v-slot:label>\r\n                <span :class=\"$vuetify.theme.dark ? 'label-dark' : 'label'\">{{translate('Password')}}</span>\r\n            </template>\r\n          </v-text-field>\r\n            <v-text-field filled rounded>\r\n              <template v-slot:label>\r\n              <span :class=\"$vuetify.theme.dark ? 'label-dark' : 'label'\">{{translate('Phone Nr.')}}</span>\r\n            </template>\r\n            </v-text-field>\r\n            <v-textarea filled rounded>\r\n              <template v-slot:label>\r\n              <span :class=\"$vuetify.theme.dark ? 'label-dark' : 'label'\">{{translate('Short Bio')}}</span>\r\n            </template>\r\n            </v-textarea>\r\n          </v-col>\r\n        </v-form>\r\n      </v-card>\r\n    </v-col>\r\n\r\n    <v-col cols=\"12\" xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\">\r\n      <StatsCard />\r\n\r\n      <v-row>\r\n        <!-- <v-col\r\n          cols=\"12\"\r\n          xs=\"12\"\r\n          sm=\"12\"\r\n          md=\"6\"\r\n          lg=\"6\"\r\n          class=\"d-flex justify-start mt-15\"\r\n        >\r\n          <v-btn text color=\"primary\">{{translate('Discard Changes')}}</v-btn>\r\n        </v-col> -->\r\n        <v-col\r\n          cols=\"12\"\r\n          xs=\"12\"\r\n          sm=\"12\"\r\n          md=\"12\"\r\n          lg=\"12\"\r\n          class=\"d-flex justify-end mt-15\"\r\n        >\r\n          <v-btn @click=\"updateUser\" color=\"primary\">{{translate('Update Profile')}}</v-btn>\r\n        </v-col>\r\n      </v-row>\r\n      <v-row class=\"justify-end\">\r\n        <v-btn @click=\"exitApp\" color=\"error\" class=\"mr-3\">{{ translate('Log out') }}</v-btn>\r\n      </v-row>\r\n    </v-col>\r\n  </v-row>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport * as LANGUAGE from '../../store/language.json';\r\nimport SnackBar from \"../Snackbar/SnackBar.vue\";\r\nimport StatsCard from \"../Dashboard/StatsCard.vue\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: [],\r\n      default_values: {\r\n        user: {}\r\n      },\r\n      image: null,\r\n      stats: [\r\n        {\r\n          id: 1,\r\n          title: this.translate(\"Points Earned\"),\r\n          counter: 12,\r\n        },\r\n        {\r\n          id: 2,\r\n          title: this.translate(\"Callbacks\"),\r\n          counter: 4,\r\n        },\r\n        {\r\n          id: 3,\r\n          title: this.translate(\"Pending Issues\"),\r\n          counter: 6,\r\n        },  \r\n        {\r\n          id: 4,\r\n          title: this.translate(\"Total Leads\"),\r\n          counter: 409,\r\n        },\r\n      ],\r\n\r\n      menu: false,\r\n      snackbar: {\r\n        show: false,\r\n        message: \"\",\r\n        error: false\r\n      },\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    profile_img(img){\r\n      this.image = img;\r\n      this.profile_image_update(img);\r\n    },\r\n    profile_image_update(image = undefined){\r\n      let new_image = this.image;\r\n\r\n      if(image) {\r\n        new_image = image;\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n        axios \r\n            .post(\"profile_img\", { image: new_image }, { headers: {\r\n              'Content-type': 'multipart/form-data'\r\n            } })\r\n            .then((response) => {\r\n              if(image) {\r\n                this.snackbar = {\r\n                  message: \"Data updated successfully\",\r\n                  error: false\r\n                };\r\n\r\n                this.$refs.snackbar.toggleSnackbar();\r\n              }\r\n\r\n              this.$store.dispatch('getImage');\r\n\r\n              resolve(response.data.message);\r\n            })\r\n            .catch(err => {\r\n              if(image) {\r\n                const filteredErr = err.response.data.message.replace(\"2048 kilobytes\", \"2MB\");\r\n\r\n                this.snackbar = {\r\n                  message: filteredErr,\r\n                  error: true\r\n                }\r\n\r\n                this.$refs.snackbar.toggleSnackbar();\r\n              }\r\n\r\n              reject(err.response.data.message);\r\n            });\r\n      })\r\n    },\r\n    translate(word) {\r\n      let wordIndex = null;\r\n\r\n      LANGUAGE.forEach((lng, index) => {\r\n        if(lng.english.toLowerCase() == word.toLowerCase()) {\r\n          wordIndex = index;\r\n        }\r\n      });\r\n\r\n      if(wordIndex === null) {\r\n        return word;\r\n      }\r\n\r\n      if(this.$store.state.language == 'german') {\r\n        return LANGUAGE[wordIndex].german;\r\n      } else {\r\n        return LANGUAGE[wordIndex].english;\r\n      }\r\n    },\r\n\r\n    exitApp() {\r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"user\");\r\n      this.$router.push(\"/login\");\r\n    },\r\n\r\n    async updateUser() {\r\n      if(this.image) {\r\n        let updated = true;\r\n\r\n        try {\r\n          await this.profile_image_update();\r\n\r\n          this.$store.dispatch(\"getImage\");\r\n        } catch (err) {\r\n              const filteredErr = err.replace(\"2048 kilobytes\", \"2MB\");\r\n\r\n              this.snackbar = {\r\n                message: filteredErr,\r\n                error: true\r\n              }\r\n\r\n              this.$refs.snackbar.toggleSnackbar();\r\n\r\n              updated = false;\r\n        }\r\n\r\n        if(!updated) return;\r\n      }\r\n\r\n      // let userInfo = this.user;\r\n      // if(val) {\r\n      //   userInfo = val;\r\n      // }\r\n\r\n      // console.log(\"nah\", this.user);\r\n\r\n      axios\r\n          .put(\"/user/update\", this.user)\r\n          .then((response) => {\r\n            localStorage.setItem('user', JSON.stringify(response.data.user));\r\n            \r\n            this.snackbar = {\r\n              message: \"Data updated successfully\",\r\n              error: false\r\n            };\r\n\r\n            this.$refs.snackbar.toggleSnackbar();\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n\r\n            let err = error.response.data.message.replace(\"(and 2 more errors)\", \"\")\r\n                                                  .replace(\"(and 1 more error)\", \"\")\r\n                                                  .trim();\r\n\r\n            this.snackbar = {\r\n              message: err,\r\n              error: true\r\n            }\r\n\r\n            this.$refs.snackbar.toggleSnackbar();\r\n          });\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    let user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    if (user) {\r\n      this.user = user;\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    // user: {\r\n    //   handler(newValue) {\r\n    //     this.updateUser(newValue);\r\n    //   },\r\n    //   deep: true,\r\n    // }\r\n  },\r\n\r\n  components: { SnackBar, StatsCard }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.profile-card {\r\n  padding: 20px;\r\n  border-radius: 30px !important;\r\n  border: none;\r\n}\r\n\r\n.profile-status {\r\n  padding: 45px;\r\n}\r\n\r\n.profile-stats {\r\n  border: solid 1px #36a5dd;\r\n  border-radius: 8px;\r\n}\r\n\r\n.label {\r\n  color: black;\r\n  opacity: .4;\r\n}\r\n\r\n.label-dark {\r\n  color: white;\r\n  opacity: .5;\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}