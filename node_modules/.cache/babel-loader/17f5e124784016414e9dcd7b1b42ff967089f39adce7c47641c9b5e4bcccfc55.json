{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport * as LANGUAGE from '../../store/language.json';\nexport default {\n  name: \"StatisticsLine\",\n  props: [\"mode\"],\n  data() {\n    return {\n      agents: [],\n      current_agent: [],\n      options: {\n        chart: {\n          height: 350,\n          type: 'line',\n          dropShadow: {\n            enabled: true,\n            color: '#000',\n            top: 18,\n            left: 7,\n            blur: 10,\n            opacity: 0.2\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        colors: ['#36A5DD', '#545454'],\n        dataLabels: {\n          enabled: true\n        },\n        stroke: {\n          curve: 'smooth'\n        },\n        grid: {\n          borderColor: '#e7e7e7',\n          row: {\n            colors: ['#f3f3f3', 'transparent'],\n            // takes an array which will be repeated on columns\n            opacity: 0.5\n          }\n        },\n        markers: {\n          size: 1\n        },\n        xaxis: {\n          categories: []\n        },\n        legend: {\n          position: 'top',\n          horizontalAlign: 'right',\n          floating: true,\n          offsetY: -25,\n          offsetX: -5\n        }\n      },\n      series: [],\n      leads: []\n    };\n  },\n  watch: {\n    current_agent(val) {\n      if (this.mode == 'single') return;\n      this.filterPerCurrentAgent(val);\n    },\n    \"$vuetify.theme.dark\": {\n      handler(newVal) {\n        this.$refs.apexChart.updateOptions({\n          xaxis: {\n            labels: {\n              style: {\n                colors: [newVal ? 'white' : \"black\"]\n              }\n            }\n          }\n        });\n      },\n      deep: true\n    }\n  },\n  methods: {\n    translate(word) {\n      let wordIndex = null;\n      LANGUAGE.forEach((lng, index) => {\n        if (lng.english.toLowerCase() == word.toLowerCase()) {\n          wordIndex = index;\n        }\n      });\n      if (wordIndex === null) {\n        return word;\n      }\n      if (this.$store.state.language == 'german') {\n        return LANGUAGE[wordIndex].german;\n      } else {\n        return LANGUAGE[wordIndex].english;\n      }\n    },\n    getAllUsers() {\n      axios.get(\"get_all_users\").then(response => {\n        const agents = response.data;\n        const agents_prepare = [];\n        agents.forEach(agent => {\n          const data = {\n            text: `${agent.first_name} ${agent.last_name}`,\n            value: agent.id\n          };\n          agents_prepare.push(data);\n        });\n        this.agents = agents_prepare;\n        this.current_agent = agents_prepare[0];\n      }).catch(e => console.log(e));\n    },\n    getLeads() {\n      axios.get('/get_all_leads').then(res => {\n        this.leads = res.data;\n        this.$nextTick(() => {\n          if (this.mode == 'single') {\n            const current_user_id = JSON.parse(localStorage.getItem('user')).id;\n            this.filterPerCurrentAgent(current_user_id);\n          }\n        });\n      }).catch(err => console.log(err));\n    },\n    filterPerCurrentAgent(agent_id) {\n      const agents_leads = this.leads.filter(lead => lead.user_id == agent_id);\n      const completed_leads = agents_leads.filter(lead => lead.status_id == 13);\n      const current_year = new Date().getFullYear();\n      // let grouped_year = [];\n      let grouped_month = [[], [], [], [], [], [], [], [], [], [], [], []];\n      grouped_month.length = 12;\n      completed_leads.forEach(cl => {\n        const created_at = new Date(cl.created_at);\n        if (created_at.getFullYear() == current_year) {\n          const month = created_at.getMonth();\n          grouped_month[month] = [...grouped_month[month], cl];\n        }\n      });\n      const current_month = new Date().getMonth();\n      const length = [];\n      for (let i = 0; i <= current_month; i++) {\n        length.push(grouped_month[i].length);\n      }\n      this.$refs.apexChart.updateSeries([{\n        name: this.translate('Completed leads'),\n        data: [...length]\n      }], false, true);\n    },\n    getSpecificMonth(month) {\n      return this.translate(month).substring(0, 3);\n    },\n    getAllMonths() {\n      const months = [this.getSpecificMonth('Janaury'), this.getSpecificMonth('February'), this.getSpecificMonth('March'), this.getSpecificMonth('April'), this.getSpecificMonth('May'), this.getSpecificMonth('June'), this.getSpecificMonth('July'), this.getSpecificMonth('August'), this.getSpecificMonth('September'), this.getSpecificMonth('October'), this.getSpecificMonth('November'), this.getSpecificMonth('December')];\n      return months;\n    },\n    updateMonths() {\n      const all_months = this.getAllMonths();\n      const current_month = new Date().getMonth();\n      for (let i = 0; i <= current_month; i++) {\n        this.options.xaxis.categories.push(all_months[i]);\n      }\n    }\n  },\n  created() {\n    this.updateMonths();\n    this.getAllUsers();\n    this.getLeads();\n  }\n};","map":{"version":3,"names":["axios","LANGUAGE","name","props","data","agents","current_agent","options","chart","height","type","dropShadow","enabled","color","top","left","blur","opacity","toolbar","show","colors","dataLabels","stroke","curve","grid","borderColor","row","markers","size","xaxis","categories","legend","position","horizontalAlign","floating","offsetY","offsetX","series","leads","watch","val","mode","filterPerCurrentAgent","handler","newVal","$refs","apexChart","updateOptions","labels","style","deep","methods","translate","word","wordIndex","forEach","lng","index","english","toLowerCase","$store","state","language","german","getAllUsers","get","then","response","agents_prepare","agent","text","first_name","last_name","value","id","push","catch","e","console","log","getLeads","res","$nextTick","current_user_id","JSON","parse","localStorage","getItem","err","agent_id","agents_leads","filter","lead","user_id","completed_leads","status_id","current_year","Date","getFullYear","grouped_month","length","cl","created_at","month","getMonth","current_month","i","updateSeries","getSpecificMonth","substring","getAllMonths","months","updateMonths","all_months","created"],"sources":["src/components/Statistics/StatisticsLine.vue"],"sourcesContent":["<template>\r\n    <v-row>\r\n      <v-col cols=\"12\" xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\r\n        <v-card class=\"stats pa-5\" outlined>\r\n          <v-subheader><h3>{{ translate(mode == 'single' ? 'My performance': 'Perfomance of agent') }}</h3></v-subheader>\r\n          <div id=\"chart\">\r\n            <apexChart\r\n              width=\"100%\"\r\n              :height=\"mode == 'single' ? 200 : 350\"\r\n              ref=\"apexChart\"\r\n              type=\"line\"\r\n              :options=\"options\"\r\n              :series=\"series\"\r\n            ></apexChart>\r\n            <div class=\"toolbar\" v-if=\"mode != 'single'\">\r\n              <v-row justify=\"end\" items=\"end\">\r\n                <v-col cols=\"12\" md=\"8\">\r\n                  <v-select\r\n                    :items=\"agents\"\r\n                    outlined\r\n                    v-model=\"current_agent\"\r\n                  ></v-select>\r\n                </v-col>\r\n              </v-row>\r\n            </div>\r\n          </div>\r\n        </v-card>\r\n      </v-col>\r\n    </v-row>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport * as LANGUAGE from '../../store/language.json';\r\n\r\n    export default {\r\n        name: \"StatisticsLine\",\r\n        props: [\"mode\"],\r\n        data(){return {\r\n          agents: [],\r\n          current_agent: [],\r\n          options:{\r\n          chart: {\r\n            height: 350,\r\n            type: 'line',\r\n            dropShadow: {\r\n                enabled: true,\r\n                color: '#000',\r\n                top: 18,\r\n                left: 7,\r\n                blur: 10,\r\n                opacity: 0.2\r\n            },\r\n            toolbar: {\r\n                show: false\r\n            }\r\n            },\r\n            colors: ['#36A5DD', '#545454'],\r\n            dataLabels: {\r\n                enabled: true,\r\n            },\r\n            stroke: {\r\n                curve: 'smooth'\r\n            },\r\n            grid: {\r\n            borderColor: '#e7e7e7',\r\n            row: {\r\n                colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n                opacity: 0.5\r\n            },\r\n            },\r\n            markers: {\r\n                size: 1\r\n            },\r\n            xaxis: {\r\n                categories: [],\r\n            },\r\n            legend: {\r\n                position: 'top',\r\n                horizontalAlign: 'right',\r\n                floating: true,\r\n                offsetY: -25,\r\n                offsetX: -5\r\n            }\r\n          },\r\n          series: [\r\n          ],\r\n          leads: []\r\n        }},\r\n        watch: {\r\n          current_agent(val) {\r\n            if(this.mode == 'single') return;\r\n\r\n            this.filterPerCurrentAgent(val);\r\n          },\r\n          \"$vuetify.theme.dark\": {\r\n            handler(newVal){\r\n              this.$refs.apexChart.updateOptions({\r\n                xaxis: {\r\n                  labels: {\r\n                    style: {\r\n                      colors: [newVal ? 'white': \"black\"]\r\n                    }\r\n                  }\r\n                },\r\n              })\r\n            },\r\n            deep: true\r\n          }\r\n        },\r\n        methods: {\r\n          translate(word) {\r\n            let wordIndex = null;\r\n\r\n            LANGUAGE.forEach((lng, index) => {\r\n              if(lng.english.toLowerCase() == word.toLowerCase()) {\r\n                wordIndex = index;\r\n              }\r\n            });\r\n\r\n            if(wordIndex === null) {\r\n              return word;\r\n            }\r\n\r\n            if(this.$store.state.language == 'german') {\r\n              return LANGUAGE[wordIndex].german;\r\n            } else {\r\n              return LANGUAGE[wordIndex].english;\r\n            }\r\n          },\r\n          getAllUsers() {\r\n            axios\r\n               .get(\"get_all_users\")\r\n               .then(response => {\r\n                  const agents = response.data;\r\n\r\n                  const agents_prepare = [];\r\n\r\n                  agents.forEach(agent => {\r\n                      const data = {\r\n                        text: `${agent.first_name} ${agent.last_name}`,\r\n                        value: agent.id\r\n                      }\r\n\r\n                      agents_prepare.push(data);\r\n                  });\r\n\r\n                  this.agents = agents_prepare;\r\n                  this.current_agent = agents_prepare[0]\r\n               }).catch(e => console.log(e));\r\n          },\r\n          getLeads() {\r\n            axios \r\n                  .get('/get_all_leads')\r\n                  .then(res => {\r\n                    this.leads = res.data;\r\n\r\n                    this.$nextTick(() => {\r\n                      if(this.mode == 'single') {\r\n                        const current_user_id = JSON.parse(localStorage.getItem('user')).id;\r\n                        this.filterPerCurrentAgent(current_user_id);\r\n                      }\r\n                    })\r\n                  })\r\n                  .catch(err => console.log(err));\r\n          },\r\n          filterPerCurrentAgent(agent_id) {\r\n            \r\n            const agents_leads = this.leads.filter(lead => lead.user_id == agent_id);\r\n            const completed_leads = agents_leads.filter(lead => lead.status_id == 13);\r\n            const current_year = new Date().getFullYear();\r\n            // let grouped_year = [];\r\n            let grouped_month = [[],[],[],[],[],[],[],[],[],[],[],[]];\r\n            grouped_month.length = 12;\r\n\r\n            completed_leads.forEach(cl => {\r\n              const created_at = new Date(cl.created_at);\r\n\r\n              if(created_at.getFullYear() == current_year) {\r\n                const month = created_at.getMonth();\r\n                grouped_month[month] = [...grouped_month[month], cl];\r\n              }\r\n            });\r\n            \r\n\r\n            const current_month = new Date().getMonth();\r\n            const length = [];\r\n            for (let i = 0; i <= current_month; i++) {\r\n              length.push(grouped_month[i].length);\r\n            }\r\n\r\n            this.$refs.apexChart.updateSeries([\r\n              {name: this.translate('Completed leads'), data: [...length]},\r\n            ], false, true);\r\n          },\r\n          getSpecificMonth(month){\r\n            return this.translate(month).substring(0, 3);\r\n          },\r\n          getAllMonths() {\r\n            const months = [\r\n              this.getSpecificMonth('Janaury'),\r\n              this.getSpecificMonth('February'),\r\n              this.getSpecificMonth('March'),\r\n              this.getSpecificMonth('April'),\r\n              this.getSpecificMonth('May'),\r\n              this.getSpecificMonth('June'),\r\n              this.getSpecificMonth('July'),\r\n              this.getSpecificMonth('August'),\r\n              this.getSpecificMonth('September'),\r\n              this.getSpecificMonth('October'),\r\n              this.getSpecificMonth('November'),\r\n              this.getSpecificMonth('December'),\r\n            ]; \r\n\r\n            return months;\r\n          },\r\n\r\n          updateMonths() {\r\n            const all_months = this.getAllMonths();\r\n            \r\n            const current_month = new Date().getMonth();\r\n            for(let i = 0; i <= current_month; i++) {\r\n              this.options.xaxis.categories.push(all_months[i]);\r\n            }\r\n          }\r\n        },\r\n        created() {\r\n          this.updateMonths();\r\n          this.getAllUsers();\r\n          this.getLeads();\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .v-card.stats {\r\n        border-radius: 15px !important;\r\n        overflow: auto;\r\n        border: none;\r\n        padding: 20px;\r\n    }\r\n    .toolbar {\r\n      position: absolute;\r\n      top: 20px;\r\n      right: 20px;\r\n    }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}