{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport * as LANGUAGE from '../../store/language.json';\nexport default {\n  name: \"CalendarWidget\",\n  data() {\n    return {\n      events: [\n        // {\n        //   topic: \"Client Meeting\",\n        //   message: `Lorem ipsum dolor sit amet, dolor sit amet.`,\n        //   time: \"09:00 AM\",\n        //   color: \"#36A5DD\",\n        // },\n        // {\n        //   topic: \"Tasks Today\",\n        //   message: \"Lorem ipsum dolor sit amet, dolor sit amet.\",\n        //   time: \"10:00 PM\",\n        //   color: \"#1A1F3A\",\n        // },\n        // {\n        //   topic: \"Daily Meeting\",\n        //   message: \"Sprint 10 - Code Review. 2nd meeting\",\n        //   time: \"12:00 AM\",\n        //   color: \"#FE9210\",\n        // },\n      ],\n      days: [],\n      months: {\n        Jan: '01',\n        Feb: '02',\n        Mar: '03',\n        Apr: '04',\n        May: '05',\n        Jun: '06',\n        Jul: '07',\n        Aug: '08',\n        Sep: '09',\n        Oct: '10',\n        Nov: '11',\n        Dec: '12'\n      },\n      today: new Date(),\n      today_date: {},\n      active_day: null\n    };\n  },\n  methods: {\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    translate(word) {\n      let wordIndex = null;\n      if (word == null) return word;\n      LANGUAGE.forEach((lng, index) => {\n        if (lng.english.toLowerCase() == word.toLowerCase()) {\n          wordIndex = index;\n        }\n      });\n      if (wordIndex === null) {\n        return word;\n      }\n      if (this.$store.state.language == 'german') {\n        return LANGUAGE[wordIndex].german;\n      } else {\n        return LANGUAGE[wordIndex].english;\n      }\n    },\n    workingDays(start, end) {\n      var arr = [];\n      var dt = new Date(start);\n      while (dt <= end) {\n        arr.push(new Date(dt).toString().substring(0, 15));\n        dt.setDate(dt.getDate() + 1);\n      }\n      return arr;\n    },\n    getDayTasks(date) {\n      axios.get('/task?date=' + date).then(response => {\n        console.log('calendar', response);\n        this.events = [];\n        for (let $i = 0; response.data.data.length > 0; $i++) {\n          console.count(response.data.data[$i].name);\n          this.events.push({\n            topic: response.data.data[$i].name,\n            message: response.data.data[$i].note,\n            time: response.data.data[$i].date,\n            type: response.data.data[$i].type,\n            color: \"#0F123F\"\n          });\n        }\n        this.$nextTick(() => {\n          console.log('aaa', this.events);\n        });\n        if (response.data.data.length === 0) {\n          this.events.push({\n            topic: 'No Tasks',\n            message: '',\n            time: '',\n            color: \"#FE9210\"\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    getTodayInfo() {\n      let today = new Date().toISOString().slice(0, 10);\n      for (let $i = 0; this.days.length > 0; $i++) {\n        console.log(\"This day:\", this.days[$i].full_date == today);\n        console.log(\"the today\", today);\n        if (this.days[$i].full_date == today) {\n          this.today_date = {\n            date: this.days[$i].date,\n            day: this.days[$i].day,\n            active: true,\n            month_name: this.days[$i].month_name,\n            month: this.days[$i].month,\n            full_date: this.days[$i].full_date\n          };\n          this.active_day = this.days[$i].full_date;\n        }\n      }\n    }\n  },\n  beforeMount() {\n    let currentDate = new Date();\n    let firstday = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay()));\n    let lastday = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() + 6));\n    let datesArray = this.workingDays(firstday, lastday);\n    let today = new Date().toISOString().slice(0, 10);\n    for (let $i = 0; datesArray.length > 0; $i++) {\n      if (!datesArray[$i].startsWith(\"Sun\") && !datesArray[$i].startsWith(\"Sat\")) {\n        const dateData = datesArray[$i].split(\" \");\n        if (new Date().getFullYear() + '-' + this.months[dateData[1]] + '-' + dateData[2] === today) {\n          this.days.push({\n            date: dateData[2],\n            day: dateData[0],\n            active: true,\n            month_name: dateData[1],\n            month: this.months[dateData[1]],\n            full_date: new Date().getFullYear() + '-' + this.months[dateData[1]] + '-' + dateData[2]\n          });\n        } else {\n          this.days.push({\n            date: dateData[2],\n            day: dateData[0],\n            active: false,\n            month_name: dateData[1],\n            month: this.months[dateData[1]],\n            full_date: new Date().getFullYear() + '-' + this.months[dateData[1]] + '-' + dateData[2]\n          });\n        }\n      }\n    }\n  },\n  mounted() {\n    let today = new Date().toISOString().slice(0, 10);\n    this.getDayTasks(today);\n    this.getTodayInfo();\n  }\n};","map":{"version":3,"names":["axios","LANGUAGE","name","data","events","days","months","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","today","Date","today_date","active_day","methods","formatDate","date","options","year","month","day","hour","minute","toLocaleDateString","undefined","translate","word","wordIndex","forEach","lng","index","english","toLowerCase","$store","state","language","german","workingDays","start","end","arr","dt","push","toString","substring","setDate","getDate","getDayTasks","get","then","response","console","log","$i","length","count","topic","message","note","time","type","color","$nextTick","catch","error","getTodayInfo","toISOString","slice","full_date","active","month_name","beforeMount","currentDate","firstday","getDay","lastday","datesArray","startsWith","dateData","split","getFullYear","mounted"],"sources":["src/components/Dashboard/CalendarWidget.vue"],"sourcesContent":["<template>\r\n  <v-card outlined id=\"calendar\">\r\n    <v-card-title>{{ translate(\"Today\") }}, {{ today_date.date }} {{ today_date.month_name }}</v-card-title>\r\n    <v-col>\r\n      <v-row>\r\n        <v-col class=\"column-day\" v-for=\"day in days\" :key=\"day.id\">\r\n          <!-- <v-card outlined class=\"days\" :class=\"{ active: active }\"> -->\r\n          <label>\r\n            <input type=\"radio\" :value=\"day.full_date\" v-model=\"active_day\" class=\"d-none\">\r\n            <v-card outlined class=\"days\" :class=\"{active: day.active, 'inactive-dark': !day.active && $vuetify.theme.dark}\" @click=\"getDayTasks(day.full_date)\">\r\n              <p class=\"date d-flex justify-center\">{{ day.date }}</p>\r\n              <p class=\"day d-flex justify-center\">\r\n                {{ translate(day.day).substring(0, 3) }}\r\n              </p>\r\n            </v-card>\r\n          </label>\r\n          </v-col>\r\n      </v-row>\r\n\r\n      <v-divider class=\"mt-5 mb-5\"></v-divider>\r\n\r\n      <v-timeline align-top dense>\r\n        <v-timeline-item\r\n          v-for=\"event in events\"\r\n          :key=\"event.time\"\r\n          :color=\"event.color\"\r\n          small\r\n        >\r\n          <div class=\"event-card\" :class=\"event.type\" :style=\"{ 'background-color': event.color }\">\r\n            <div class=\"font-weight-normal\">\r\n              <strong>{{ translate(event.topic) }}</strong> {{ formatDate(event.time) }}\r\n            </div>\r\n            <div>{{ translate(event.message) }}</div>\r\n          </div>\r\n        </v-timeline-item>\r\n      </v-timeline>\r\n    </v-col>\r\n  </v-card>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport * as LANGUAGE from '../../store/language.json';\r\n\r\nexport default {\r\n  name: \"CalendarWidget\",\r\n\r\n  data() {\r\n    return {\r\n      events: [\r\n        // {\r\n        //   topic: \"Client Meeting\",\r\n        //   message: `Lorem ipsum dolor sit amet, dolor sit amet.`,\r\n        //   time: \"09:00 AM\",\r\n        //   color: \"#36A5DD\",\r\n        // },\r\n        // {\r\n        //   topic: \"Tasks Today\",\r\n        //   message: \"Lorem ipsum dolor sit amet, dolor sit amet.\",\r\n        //   time: \"10:00 PM\",\r\n        //   color: \"#1A1F3A\",\r\n        // },\r\n        // {\r\n        //   topic: \"Daily Meeting\",\r\n        //   message: \"Sprint 10 - Code Review. 2nd meeting\",\r\n        //   time: \"12:00 AM\",\r\n        //   color: \"#FE9210\",\r\n        // },\r\n      ],\r\n\r\n      days: [],\r\n\r\n      months: {\r\n        Jan: '01',\r\n        Feb: '02',\r\n        Mar: '03',\r\n        Apr: '04',\r\n        May: '05',\r\n        Jun: '06',\r\n        Jul: '07',\r\n        Aug: '08',\r\n        Sep: '09',\r\n        Oct: '10',\r\n        Nov: '11',\r\n        Dec: '12',\r\n      },\r\n\r\n      today: new Date(),\r\n\r\n      today_date: {},\r\n\r\n      active_day: null\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    formatDate(date) {\r\n      const options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' };\r\n      return new Date(date).toLocaleDateString(undefined, options);\r\n    },\r\n    translate(word) {\r\n      let wordIndex = null;\r\n\r\n      if(word == null) return word;\r\n\r\n      LANGUAGE.forEach((lng, index) => {\r\n        if(lng.english.toLowerCase() == word.toLowerCase()) {\r\n          wordIndex = index;\r\n        }\r\n      });\r\n\r\n      if(wordIndex === null) {\r\n        return word;\r\n      }\r\n\r\n      if(this.$store.state.language == 'german') {\r\n        return LANGUAGE[wordIndex].german;\r\n      } else {\r\n        return LANGUAGE[wordIndex].english;\r\n      }\r\n    },\r\n\r\n    workingDays(start, end) {\r\n      var arr = [];\r\n      var dt = new Date(start);\r\n      while (dt <= end) {\r\n        arr.push((new Date(dt)).toString().substring(0,15));\r\n        dt.setDate(dt.getDate() + 1);\r\n      }\r\n      return arr;\r\n    },\r\n\r\n    getDayTasks(date) {\r\n      axios\r\n        .get('/task?date=' + date)\r\n        .then((response) => {\r\n          console.log('calendar', response)\r\n          this.events = []\r\n          for (let $i = 0; response.data.data.length > 0; $i++) {\r\n            console.count(response.data.data[$i].name);\r\n            this.events.push({\r\n              topic: response.data.data[$i].name,\r\n              message: response.data.data[$i].note,\r\n              time: response.data.data[$i].date,\r\n              type: response.data.data[$i].type,\r\n              color: \"#0F123F\"\r\n            })\r\n          }\r\n\r\n          this.$nextTick(() => {\r\n            console.log('aaa',this.events);\r\n          })\r\n\r\n          if (response.data.data.length === 0) {\r\n            this.events.push({\r\n              topic: 'No Tasks',\r\n              message: '',\r\n              time: '',\r\n              color: \"#FE9210\"\r\n            })\r\n          }\r\n        })\r\n        .catch((error) => {console.log(error)})\r\n    },\r\n\r\n    getTodayInfo() {\r\n      let today = new Date().toISOString().slice(0, 10);\r\n\r\n      for (let $i = 0; this.days.length > 0; $i++) {\r\n        console.log(\"This day:\", this.days[$i].full_date == today)\r\n        console.log(\"the today\", today)\r\n\r\n        if (this.days[$i].full_date == today) {\r\n        this.today_date = {\r\n          date: this.days[$i].date,\r\n          day: this.days[$i].day,\r\n          active: true,\r\n          month_name: this.days[$i].month_name,\r\n          month: this.days[$i].month,\r\n          full_date: this.days[$i].full_date\r\n        }\r\n\r\n        this.active_day = this.days[$i].full_date;\r\n        }\r\n      }\r\n    }\r\n\r\n  },\r\n\r\n\r\n  beforeMount() {\r\n    let currentDate = new Date();\r\n    let firstday = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay()));\r\n    let lastday = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() + 6));\r\n\r\n    let datesArray = this.workingDays(firstday, lastday)\r\n\r\n    let today = new Date().toISOString().slice(0, 10);\r\n\r\n    for (let $i = 0; datesArray.length > 0; $i++) {\r\n      if (!datesArray[$i].startsWith(\"Sun\") && !datesArray[$i].startsWith(\"Sat\")) {\r\n\r\n        const dateData = datesArray[$i].split(\" \");\r\n\r\n        if (new Date().getFullYear() + '-' + this.months[dateData[1]] + '-' + dateData[2] === today) {\r\n          this.days.push({\r\n            date: dateData[2],\r\n            day: dateData[0],\r\n            active: true,\r\n            month_name: dateData[1],\r\n            month: this.months[dateData[1]],\r\n            full_date: new Date().getFullYear() + '-' + this.months[dateData[1]] + '-' + dateData[2]\r\n          })\r\n        } else {\r\n          this.days.push({\r\n            date: dateData[2],\r\n            day: dateData[0],\r\n            active: false,\r\n            month_name: dateData[1],\r\n            month: this.months[dateData[1]],\r\n            full_date: new Date().getFullYear() + '-' + this.months[dateData[1]] + '-' + dateData[2]\r\n          })\r\n        }\r\n\r\n      }\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n\r\n    let today = new Date().toISOString().slice(0, 10);\r\n    this.getDayTasks(today)\r\n\r\n    this.getTodayInfo()\r\n  },\r\n\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.days {\r\n  border-radius: 10px;\r\n  border: none;\r\n  background: #f8f8ff;\r\n  padding: 9px;\r\n  border-radius: 13px;\r\n}\r\n\r\n.days.inactive-dark {\r\n  background: rgba(0, 0, 0, 0.25);\r\n}\r\n\r\ninput[type=radio]:checked ~ * {\r\n  background: #0f123f;\r\n  color: #fff;\r\n  box-shadow: 0px 20px 55px rgba(15, 18, 63, 0.25);\r\n}\r\n\r\n.days > p {\r\n  margin: 0;\r\n  font-size: 14px;\r\n}\r\n\r\n.days > p:first-child {\r\n  font-size: 17px;\r\n}\r\n\r\n#calendar {\r\n  border: none;\r\n  min-width: 100% !important;\r\n  border-radius: 10px;\r\n}\r\n\r\n.v-divider {\r\n  border: 1px solid #ededff;\r\n}\r\n\r\n.event-card {\r\n  padding: 10px;\r\n  color: #fff;\r\n  border-radius: 10px;\r\n}\r\n\r\n.event-card.\\31{\r\n  background-color: #36A5DD !important;\r\n}\r\n\r\n.event-card.\\32{\r\n  background-color: #00a10b !important;\r\n}\r\n\r\n.event-card.\\33{\r\n  background-color: #c9a202 !important;\r\n}\r\n\r\n.event-card.\\34{\r\n  background-color: #0F123F !important;\r\n}\r\n.column-day {\r\n  width: 20%;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}