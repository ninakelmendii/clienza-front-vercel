{"ast":null,"code":"import { TOKEN } from \"./const/const\";\n\n// import { Client } from \"@microsoft/microsoft-graph-client\";\n// import { TokenCredentialAuthenticationProvider } from \"@microsoft/microsoft-graph-client/authProviders/azureTokenCredentials\";\n// import { ClientSecretCredential } from '@azure/identity';\n\n// const tenantId = 'f8cdef31-a31e-4b4a-93e4-5f571e91255a';\n// const clientId = '34f6579c-78e8-4442-af4f-d75ae62ab834';\n// // const clientSecret = 'ba446ccb-259d-4336-a41f-8e4ca1550c98';\n// const redirectUri = 'https://localhost:8080';\n\n// // Set the scope for the token\n// const scope = 'https://graph.microsoft.com/.default';\n\n// // Build the authorization URL\n// const authUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirectUri}&scope=${scope}`;\n\n// Redirect the user to the authorization URL\n// window.location.href = authUrl;\n\n// const credential = new ClientSecretCredential(tenantId, clientId, clientSecret);\n// const authProvider = new TokenCredentialAuthenticationProvider(credential, {scopes: [\"user.read\"]});\n\n// const clientId = 'YOUR_CLIENT_ID';\n// const clientSecret = 'YOUR_CLIENT_SECRET';\n// const refreshToken = 'YOUR_REFRESH_TOKEN';\n\n// const body = `grant_type=refresh_token&client_id=${clientId}&client_secret=${clientSecret}&refresh_token=${TOKEN}`;\n\n// const url = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`;\n\n// fetch(url, {\n//     method: 'POST',\n//     body: body,\n//     headers: {\n//         'Content-Type': 'application/x-www-form-urlencoded'\n//     }\n// }).then(response => {\n//    console.log(response)\n// })\n\n// --------------------------------------------------- new testing\n// const msal = require(\"@azure/msal-node\");\n\n// const msalConfig = {\n//     auth: {\n//         clientId: \"6951f7bc-086d-418f-a71d-cca7b39579ac\",\n//         authority: \"d1ca4da3-96eb-4253-a757-799e22e5d98c\",\n//     }\n// };\n\n// const pca = new msal.PublicClientApplication(msalConfig);\n\n// // For testing, enter your username and password below.\n// // In production, replace this with a UI prompt instead.\n// const usernamePasswordRequest = {\n//     scopes: [\"user.read\"],\n//     username: \"info@clienza.ch\", // Add your username here\n//     password: \"Clienza2022.\", // Add your password here\n// };\n\n// pca.acquireTokenByUsernamePassword(usernamePasswordRequest).then((response) => {\n//     console.log(\"acquired token by password grant\", response);\n// }).catch((error) => {\n//     console.log(error);\n// });\n\nclass MGraph {\n  // Outlook calendar\n  static async getAllEvents() {\n    const now = new Date();\n    const start = new Date(now.setFullYear(now.getFullYear() - 1)).toDateString();\n    const end = new Date(now.setFullYear(now.getFullYear() + 2)).toDateString();\n    const request = await fetch(`https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start}&enddatetime=${end}`, {\n      method: \"GET\",\n      headers: {\n        'Authorization': `Bearer ${TOKEN}`\n      }\n    });\n    const response = await request.json();\n    return response.value;\n  }\n  static async createEvent(params) {\n    try {\n      const request = await fetch('https://graph.microsoft.com/v1.0/me/events', {\n        method: \"POST\",\n        headers: {\n          'Authorization': `Bearer ${TOKEN}`,\n          \"Content-Type\": 'application/json'\n        },\n        body: JSON.stringify(params)\n      });\n      const response = await request.json();\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // --------------------------------\n  // OneDrive:\n\n  // Folder and data\n  static async getItems() {\n    const request = await fetch('https://graph.microsoft.com/v1.0/me/drive/root/children', {\n      method: \"GET\",\n      'headers': {\n        'Authorization': `Bearer ${TOKEN}`\n      }\n    });\n    const response = await request.json();\n    return response;\n  }\n  static async getClienzaId() {\n    const {\n      value\n    } = await this.getItems();\n    let clienzaId = null;\n    value.forEach(item => {\n      if (item.name.toLowerCase() == 'clienza') clienzaId = item.id;\n    });\n    return clienzaId;\n  }\n  static async getRootFolderId(folderName) {\n    const id = await this.getClienzaId();\n    let folderId = null;\n    const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${id}/children`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${TOKEN}`\n      }\n    });\n    const response = await request.json();\n    const {\n      value\n    } = response;\n    value.forEach(v => {\n      if (v.name.toLowerCase() == folderName) folderId = v.id;\n    });\n    return folderId;\n  }\n  static async getClienzaRoot() {\n    const id = await this.getClienzaId();\n    const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${id}/children`, {\n      method: \"GET\",\n      'headers': {\n        'Authorization': `Bearer ${TOKEN}`\n      }\n    });\n    const response = await request.json();\n    return response;\n  }\n  static async createFolder(folderName, location) {\n    const driveItem = {\n      \"name\": folderName,\n      \"folder\": {},\n      '@microsoft.graph.conflictBehavior': 'rename'\n    };\n    const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${location}/children`, {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${TOKEN}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(driveItem)\n    });\n    const response = await request.json();\n    return response;\n  }\n\n  // Customers operations\n  static async getCustomers() {\n    const customersFolder = await this.getRootFolderId('customers');\n    const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${customersFolder}/children`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${TOKEN}`\n      }\n    });\n    const response = await request.json();\n    return response;\n  }\n  static async checkCustomerSpace(customer, no_id = false) {\n    const allCustomers = await this.getCustomers();\n    let existence = {\n      exists: false\n    };\n    if (no_id) {\n      allCustomers.value.forEach(cust => {\n        const id = cust.name.split(' ');\n        if (id[id.length - 1] == customer) {\n          existence.exists = true;\n          existence.customer = cust;\n        }\n      });\n    } else {\n      allCustomers.value.forEach(cust => {\n        if (cust.name == customer) {\n          existence.exists = true;\n          existence.customer = cust;\n        }\n      });\n    }\n    return existence;\n  }\n  static async sendDocument({\n    customer,\n    type,\n    file\n  }) {\n    // Getting the customer\n    const customerInfo = await this.checkCustomerSpace(customer);\n\n    // If customer exists\n    if (customerInfo.exists) {\n      const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${customerInfo.customer.id}/children`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${TOKEN}`\n        }\n      });\n      const customerFolders = await request.json();\n      let typeFolder = {\n        exists: false,\n        folder: null\n      };\n      customerFolders.value.forEach(folder => {\n        if (folder.name.toLowerCase() == type.toLowerCase()) {\n          typeFolder.exists = true;\n          typeFolder.folder = folder;\n        }\n      });\n\n      // If type folder exists\n      if (typeFolder.exists == true) {\n        // Check if the file already exists\n        this.sendFile(file, typeFolder.folder.id);\n        // const client = Client.initWithMiddleware({ authProvider, debugLogging: true })\n        // client.api('https://graph.microsoft.com/v1.0/me/drive/items/99FEECE9E308A0D9!102/content').get().then(response => console.log(response));\n\n        // fetch('https://graph.microsoft.com/v1.0/me/drive/items/99FEECE9E308A0D9!105:/INFO CLIENZA 2.txt:/content', {\n        //     method: 'PUT',\n        //     headers: { 'Authorization': `Bearer ${TOKEN}` },\n        //     body: \"saldjsalkdjaksdj\"\n        // }).then(response => console.log(response.url))\n\n        // console.log(s)\n      } else {\n        await this.createFolder(type, customerInfo.customer.id);\n        this.sendDocument({\n          customer,\n          type,\n          file\n        });\n      }\n      return typeFolder;\n    }\n    // If customer doesnt exists\n    else {\n      const id = await this.getRootFolderId('customers');\n      this.createFolder(customer, id);\n      this.sendDocument({\n        customer,\n        type,\n        file\n      });\n      return;\n    }\n  }\n  static async generateProfileFolder() {\n    const NAME = \"Profile\";\n    const doesExists = await this.checkOnRootFolder(NAME);\n    if (!doesExists) {\n      const clienzaId = await this.getClienzaId();\n      await this.createFolder(NAME, clienzaId);\n    }\n    const folderId = await this.getRootFolderId(NAME.toLowerCase());\n    return folderId;\n  }\n  static async setProfilePic() {\n    // Generating profile folder id\n    // const PROFILE_FOLDER_ID = await this.generateProfileFolder();\n    console.log(await this.getProfilePic(JSON.parse(localStorage.getItem('user')).id));\n    // Deleting old pic if exists\n\n    // Delete if it does\n\n    // Add the new pic\n  }\n\n  static async getProfilePic(user_id) {\n    // Check if this user has a profile pic\n    await this.generateProfileFolder();\n    const PROFILES = await this.getInfo(\"Profile\");\n    let PROFILE_PIC = null;\n    PROFILES.forEach(pic => {\n      const gettingId = pic.title.split(\" \");\n      const pic_user_id = gettingId[gettingId.length - 1];\n      if (pic_user_id == user_id) {\n        PROFILE_PIC = pic;\n      }\n    });\n\n    // Return false if image doesnt exists\n    if (PROFILE_PIC == null) return false;\n\n    // Return the image props if true\n    return PROFILE_PIC;\n  }\n  static async sendFile(file, location, customFileName = null) {\n    const url = `https://graph.microsoft.com/v1.0/me/drive/items/${location}:/${customFileName != null ? customFileName : file.name}:/content`;\n    const form = new FormData();\n    form.append('file', file);\n    fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${TOKEN}`,\n        \"Content-Type\": \"multipart/form-data\"\n      },\n      body: file\n    }).then(response => console.log(response.url));\n    console.log(url);\n  }\n  static async getCustomerDownloadFileLink(customer_id, type = 'applications', onlyDownloadLink = true) {\n    const {\n      customer\n    } = await this.checkCustomerSpace(customer_id, true);\n    const applicationsIdrequest = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${customer.id}/children`, {\n      method: 'get',\n      headers: {\n        'Authorization': `Bearer ${TOKEN}`\n      }\n    });\n    const applicationsId = await applicationsIdrequest.json();\n    const filteredId = applicationsId.value.filter(it => it.name.toLowerCase() == type);\n    console.log('aa', filteredId);\n    const files = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${filteredId[0].id}/children`, {\n      method: 'get',\n      headers: {\n        'Authorization': `Bearer ${TOKEN}`\n      }\n    });\n    const filesResponse = await files.json();\n    if (onlyDownloadLink == false) {\n      return filesResponse.value;\n    }\n    return filesResponse.value[0]['@microsoft.graph.downloadUrl'];\n  }\n  static async getOtherApplications(customer_id) {\n    const otherApplications = await this.getCustomerDownloadFileLink(customer_id, \"other applications\", false);\n    console.log('sss', otherApplications.value);\n    console.log(customer_id);\n  }\n  static async checkOnRootFolder(folderToCheck) {\n    const clienzaDirectory = await this.getClienzaRoot();\n    let folderExists = false;\n    clienzaDirectory.value.forEach(cd => {\n      if (cd.name.toLowerCase() == folderToCheck.toLowerCase()) {\n        folderExists = true;\n      }\n    });\n    return folderExists;\n  }\n\n  // Help\n  static async addInfo({\n    title,\n    file,\n    type = 'Help'\n  }) {\n    const clienzaDirectory = await this.getClienzaRoot();\n    let helpExists = false;\n    clienzaDirectory.value.forEach(cd => {\n      if (cd.name.toLowerCase() == type.toLowerCase()) {\n        helpExists = true;\n      }\n    });\n    if (!helpExists) {\n      const clienzaId = await this.getClienzaId();\n      await this.createFolder(type, clienzaId);\n    }\n    const helpFolderId = await this.getRootFolderId(type.toLowerCase());\n    const fileExt = file.name.split('.').pop();\n    const customFileName = `${title}.${fileExt}`;\n    await this.sendFile(file, helpFolderId, customFileName);\n    return customFileName;\n  }\n  static async getInfo(type = 'Help') {\n    let id = await this.getRootFolderId(type.toLowerCase());\n    if (id == null) {\n      const clienzaId = await this.getClienzaId();\n      await this.createFolder(type, clienzaId);\n    }\n    id = await this.getRootFolderId(type.toLowerCase());\n    const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${id}/children`, {\n      method: \"GET\",\n      'headers': {\n        'Authorization': `Bearer ${TOKEN}`\n      }\n    });\n    const response = await request.json();\n    let files = [];\n    response.value.forEach(help => {\n      let title = help.name.split('.');\n      title.pop();\n      title = title.toString().replace(',', '');\n      const params = {\n        id: help.id,\n        title,\n        url: help.webUrl,\n        downloadUrl: help['@microsoft.graph.downloadUrl']\n      };\n      files = [...files, params];\n    });\n    return files;\n  }\n  static async deleteInfo(item_id) {\n    await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${item_id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Authorization': `Bearer ${TOKEN}`\n      }\n    });\n  }\n}\nexport default MGraph;","map":{"version":3,"names":["TOKEN","MGraph","getAllEvents","now","Date","start","setFullYear","getFullYear","toDateString","end","request","fetch","method","headers","response","json","value","createEvent","params","body","JSON","stringify","error","console","log","getItems","getClienzaId","clienzaId","forEach","item","name","toLowerCase","id","getRootFolderId","folderName","folderId","v","getClienzaRoot","createFolder","location","driveItem","getCustomers","customersFolder","checkCustomerSpace","customer","no_id","allCustomers","existence","exists","cust","split","length","sendDocument","type","file","customerInfo","customerFolders","typeFolder","folder","sendFile","generateProfileFolder","NAME","doesExists","checkOnRootFolder","setProfilePic","getProfilePic","parse","localStorage","getItem","user_id","PROFILES","getInfo","PROFILE_PIC","pic","gettingId","title","pic_user_id","customFileName","url","form","FormData","append","then","getCustomerDownloadFileLink","customer_id","onlyDownloadLink","applicationsIdrequest","applicationsId","filteredId","filter","it","files","filesResponse","getOtherApplications","otherApplications","folderToCheck","clienzaDirectory","folderExists","cd","addInfo","helpExists","helpFolderId","fileExt","pop","help","toString","replace","webUrl","downloadUrl","deleteInfo","item_id"],"sources":["/Users/ninakelmendi/Desktop/monun/clienza-front/clienza/services/mgraph.js"],"sourcesContent":["import { TOKEN } from \"./const/const\";\r\n\r\n// import { Client } from \"@microsoft/microsoft-graph-client\";\r\n// import { TokenCredentialAuthenticationProvider } from \"@microsoft/microsoft-graph-client/authProviders/azureTokenCredentials\";\r\n// import { ClientSecretCredential } from '@azure/identity';\r\n\r\n\r\n// const tenantId = 'f8cdef31-a31e-4b4a-93e4-5f571e91255a';\r\n// const clientId = '34f6579c-78e8-4442-af4f-d75ae62ab834';\r\n// // const clientSecret = 'ba446ccb-259d-4336-a41f-8e4ca1550c98';\r\n// const redirectUri = 'https://localhost:8080';\r\n\r\n// // Set the scope for the token\r\n// const scope = 'https://graph.microsoft.com/.default';\r\n\r\n// // Build the authorization URL\r\n// const authUrl = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirectUri}&scope=${scope}`;\r\n\r\n// Redirect the user to the authorization URL\r\n// window.location.href = authUrl;\r\n\r\n// const credential = new ClientSecretCredential(tenantId, clientId, clientSecret);\r\n// const authProvider = new TokenCredentialAuthenticationProvider(credential, {scopes: [\"user.read\"]});\r\n\r\n\r\n// const clientId = 'YOUR_CLIENT_ID';\r\n// const clientSecret = 'YOUR_CLIENT_SECRET';\r\n// const refreshToken = 'YOUR_REFRESH_TOKEN';\r\n\r\n// const body = `grant_type=refresh_token&client_id=${clientId}&client_secret=${clientSecret}&refresh_token=${TOKEN}`;\r\n\r\n// const url = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`;\r\n\r\n// fetch(url, {\r\n//     method: 'POST',\r\n//     body: body,\r\n//     headers: {\r\n//         'Content-Type': 'application/x-www-form-urlencoded'\r\n//     }\r\n// }).then(response => {\r\n//    console.log(response)\r\n// })\r\n\r\n\r\n\r\n// --------------------------------------------------- new testing\r\n// const msal = require(\"@azure/msal-node\");\r\n\r\n// const msalConfig = {\r\n//     auth: {\r\n//         clientId: \"6951f7bc-086d-418f-a71d-cca7b39579ac\",\r\n//         authority: \"d1ca4da3-96eb-4253-a757-799e22e5d98c\",\r\n//     }\r\n// };\r\n\r\n// const pca = new msal.PublicClientApplication(msalConfig);\r\n\r\n// // For testing, enter your username and password below.\r\n// // In production, replace this with a UI prompt instead.\r\n// const usernamePasswordRequest = {\r\n//     scopes: [\"user.read\"],\r\n//     username: \"info@clienza.ch\", // Add your username here\r\n//     password: \"Clienza2022.\", // Add your password here\r\n// };\r\n\r\n// pca.acquireTokenByUsernamePassword(usernamePasswordRequest).then((response) => {\r\n//     console.log(\"acquired token by password grant\", response);\r\n// }).catch((error) => {\r\n//     console.log(error);\r\n// });\r\n\r\n\r\nclass MGraph {\r\n    // Outlook calendar\r\n    static async getAllEvents(){\r\n        const now = new Date();\r\n        const start = new Date(now.setFullYear(now.getFullYear() - 1)).toDateString();\r\n        const end = new Date(now.setFullYear(now.getFullYear() + 2)).toDateString();\r\n\r\n        const request = await fetch(`https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start}&enddatetime=${end}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                'Authorization': `Bearer ${TOKEN}`\r\n            }\r\n        })\r\n\r\n        const response = await request.json();\r\n\r\n        return response.value;\r\n    }\r\n\r\n    static async createEvent(params){\r\n        try {\r\n            const request = await fetch('https://graph.microsoft.com/v1.0/me/events',{\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Authorization': `Bearer ${TOKEN}`,\r\n                    \"Content-Type\": 'application/json'\r\n                },\r\n                body: JSON.stringify(params)\r\n            });\r\n\r\n        const response = await request.json();\r\n        return response;\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    // --------------------------------\r\n    // OneDrive:\r\n\r\n    // Folder and data\r\n    static async getItems(){\r\n        const request = await fetch('https://graph.microsoft.com/v1.0/me/drive/root/children', { method: \"GET\", 'headers': {\r\n            'Authorization': `Bearer ${TOKEN}`\r\n        } });\r\n\r\n        const response = await request.json();\r\n\r\n        return response;\r\n    }\r\n\r\n    static async getClienzaId(){\r\n        const { value } = await this.getItems();\r\n        let clienzaId = null;\r\n\r\n        value.forEach(item => {\r\n            if(item.name.toLowerCase() == 'clienza') clienzaId = item.id;\r\n        });\r\n\r\n        return clienzaId;\r\n    }\r\n\r\n    static async getRootFolderId(folderName) {\r\n        const id = await this.getClienzaId();\r\n        let folderId = null;\r\n\r\n        const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${id}/children`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization': `Bearer ${TOKEN}` }\r\n        });\r\n\r\n        const response = await request.json();\r\n\r\n        const { value } = response;\r\n\r\n        value.forEach(v => {\r\n            if(v.name.toLowerCase() == folderName) folderId = v.id;\r\n        });\r\n\r\n        return folderId;\r\n    }\r\n\r\n    static async getClienzaRoot() {\r\n        const id = await this.getClienzaId();\r\n\r\n        const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${id}/children`, { method: \"GET\", 'headers': {\r\n            'Authorization': `Bearer ${TOKEN}`\r\n        }});\r\n\r\n        const response = await request.json();\r\n\r\n        return response;\r\n    }\r\n\r\n    static async createFolder(folderName, location){\r\n        const driveItem = {\r\n            \"name\": folderName,\r\n            \"folder\": { },\r\n            '@microsoft.graph.conflictBehavior': 'rename'\r\n          };\r\n\r\n        const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${location}/children`, { method: \"POST\", headers: {\r\n                'Authorization': `Bearer ${TOKEN}`,\r\n                \"Content-Type\": \"application/json\"\r\n            }, body: JSON.stringify(driveItem)\r\n        });\r\n\r\n        const response = await request.json();\r\n\r\n        return response;\r\n    }\r\n\r\n\r\n    // Customers operations\r\n    static async getCustomers(){\r\n        const customersFolder = await this.getRootFolderId('customers');\r\n\r\n        const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${customersFolder}/children`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization': `Bearer ${TOKEN}` }\r\n        });\r\n\r\n        const response = await request.json();\r\n\r\n        return response;\r\n    }\r\n\r\n    static async checkCustomerSpace(customer, no_id = false){\r\n        const allCustomers = await this.getCustomers();\r\n        let existence = {\r\n            exists: false\r\n        };\r\n\r\n        if(no_id) {\r\n            allCustomers.value.forEach(cust => {\r\n                const id = cust.name.split(' ');\r\n\r\n                if(id[id.length - 1] == customer) {\r\n                    existence.exists = true;\r\n                    existence.customer = cust;\r\n                }\r\n            });\r\n        } else {\r\n            allCustomers.value.forEach(cust => {\r\n                if(cust.name == customer) {\r\n                    existence.exists = true;\r\n                    existence.customer = cust;\r\n                }\r\n            })\r\n        }\r\n\r\n        return existence;\r\n    }\r\n\r\n    static async sendDocument({ customer, type, file }) {\r\n        // Getting the customer\r\n        const customerInfo = await this.checkCustomerSpace(customer);\r\n\r\n        // If customer exists\r\n        if(customerInfo.exists) {\r\n            const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${customerInfo.customer.id}/children`, {\r\n                method: 'GET',\r\n                headers: { 'Authorization': `Bearer ${TOKEN}` }\r\n            })\r\n\r\n            const customerFolders = await request.json();\r\n\r\n            let typeFolder = {\r\n                exists: false,\r\n                folder: null\r\n            }\r\n\r\n            customerFolders.value.forEach(folder => {\r\n                if(folder.name.toLowerCase() == type.toLowerCase()) {\r\n                    typeFolder.exists = true;\r\n                    typeFolder.folder = folder;\r\n                }\r\n            })\r\n\r\n            // If type folder exists\r\n            if(typeFolder.exists == true) {\r\n                // Check if the file already exists\r\n                this.sendFile(file, typeFolder.folder.id);\r\n                // const client = Client.initWithMiddleware({ authProvider, debugLogging: true })\r\n                // client.api('https://graph.microsoft.com/v1.0/me/drive/items/99FEECE9E308A0D9!102/content').get().then(response => console.log(response));\r\n\r\n                // fetch('https://graph.microsoft.com/v1.0/me/drive/items/99FEECE9E308A0D9!105:/INFO CLIENZA 2.txt:/content', {\r\n                //     method: 'PUT',\r\n                //     headers: { 'Authorization': `Bearer ${TOKEN}` },\r\n                //     body: \"saldjsalkdjaksdj\"\r\n                // }).then(response => console.log(response.url))\r\n\r\n                // console.log(s)\r\n\r\n            } else {\r\n                await this.createFolder(type, customerInfo.customer.id);\r\n                this.sendDocument({customer, type, file});\r\n            }\r\n\r\n            return typeFolder;\r\n        }\r\n        // If customer doesnt exists\r\n        else {\r\n            const id = await this.getRootFolderId('customers');\r\n            this.createFolder(customer, id);\r\n            this.sendDocument({customer, type, file});\r\n            return;\r\n        }\r\n    }\r\n\r\n    static async generateProfileFolder() {\r\n        const NAME = \"Profile\";\r\n\r\n        const doesExists = await this.checkOnRootFolder(NAME);\r\n\r\n        if(!doesExists) {\r\n            const clienzaId = await this.getClienzaId();\r\n            await this.createFolder(NAME, clienzaId);\r\n        }\r\n\r\n        const folderId = await this.getRootFolderId(NAME.toLowerCase());\r\n\r\n        return folderId;\r\n    }\r\n\r\n    static async setProfilePic() {\r\n        // Generating profile folder id\r\n        // const PROFILE_FOLDER_ID = await this.generateProfileFolder();\r\n        console.log(await this.getProfilePic(JSON.parse(localStorage.getItem('user')).id));\r\n        // Deleting old pic if exists\r\n\r\n\r\n        // Delete if it does\r\n\r\n\r\n        // Add the new pic\r\n    }\r\n\r\n    static async getProfilePic(user_id) {\r\n        // Check if this user has a profile pic\r\n        await this.generateProfileFolder();\r\n\r\n        const PROFILES = await this.getInfo(\"Profile\");\r\n\r\n        let PROFILE_PIC = null;\r\n\r\n        PROFILES.forEach((pic) => {\r\n            const gettingId  = pic.title.split(\" \");\r\n            const pic_user_id = gettingId[gettingId.length - 1];\r\n\r\n            if(pic_user_id == user_id) {\r\n                PROFILE_PIC = pic;\r\n            }\r\n        });\r\n\r\n        // Return false if image doesnt exists\r\n        if(PROFILE_PIC == null) return false;\r\n\r\n        // Return the image props if true\r\n        return PROFILE_PIC;\r\n    }\r\n\r\n    static async sendFile(file, location, customFileName = null){\r\n        const url = `https://graph.microsoft.com/v1.0/me/drive/items/${location}:/${customFileName != null ? customFileName : file.name}:/content`;\r\n\r\n        const form = new FormData();\r\n        form.append('file', file)\r\n\r\n        fetch(url, {\r\n                method: 'PUT',\r\n                headers: { 'Authorization': `Bearer ${TOKEN}`,\"Content-Type\": \"multipart/form-data\" },\r\n                body: file\r\n            }).then(response => console.log(response.url))\r\n\r\n        console.log(url)\r\n    }\r\n\r\n    static async getCustomerDownloadFileLink(customer_id, type = 'applications', onlyDownloadLink = true){\r\n        const { customer } = await this.checkCustomerSpace(customer_id, true);\r\n\r\n        const applicationsIdrequest = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${customer.id}/children`, {\r\n            method: 'get',\r\n            headers: { 'Authorization': `Bearer ${TOKEN}` },\r\n        });\r\n\r\n        const applicationsId = await applicationsIdrequest.json();\r\n        const filteredId = applicationsId.value.filter(it => it.name.toLowerCase() == type);\r\n\r\n        console.log('aa', filteredId);\r\n\r\n        const files = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${filteredId[0].id}/children`, {\r\n            method: 'get',\r\n            headers: { 'Authorization': `Bearer ${TOKEN}` },\r\n        });\r\n\r\n        const filesResponse = await files.json();\r\n        if(onlyDownloadLink == false) {\r\n            return filesResponse.value;\r\n        }\r\n        \r\n        return filesResponse.value[0]['@microsoft.graph.downloadUrl'];\r\n    }\r\n\r\n    static async getOtherApplications(customer_id) {\r\n        const otherApplications = await this.getCustomerDownloadFileLink(customer_id, \"other applications\", false);\r\n\r\n        console.log('sss', otherApplications.value);\r\n        console.log(customer_id);\r\n    }\r\n\r\n    static async checkOnRootFolder(folderToCheck) {\r\n        const clienzaDirectory = await this.getClienzaRoot();\r\n        let folderExists = false;\r\n        \r\n        clienzaDirectory.value.forEach(cd => {\r\n            if(cd.name.toLowerCase() == folderToCheck.toLowerCase()) {\r\n                folderExists = true;\r\n            }\r\n        })\r\n\r\n        return folderExists;\r\n    }\r\n\r\n    // Help\r\n    static async addInfo({title, file, type = 'Help'}) {\r\n        const clienzaDirectory = await this.getClienzaRoot();\r\n        let helpExists = false;\r\n        \r\n        clienzaDirectory.value.forEach(cd => {\r\n            if(cd.name.toLowerCase() == type.toLowerCase()) {\r\n                helpExists = true;\r\n            }\r\n        })\r\n\r\n        if(!helpExists) {\r\n            const clienzaId = await this.getClienzaId();\r\n            await this.createFolder(type, clienzaId);\r\n        }\r\n\r\n        const helpFolderId = await this.getRootFolderId(type.toLowerCase());\r\n\r\n        const fileExt = file.name.split('.').pop();\r\n        const customFileName = `${title}.${fileExt}`;\r\n\r\n        await this.sendFile(file, helpFolderId, customFileName);\r\n\r\n        return customFileName;\r\n    }\r\n\r\n    static async getInfo(type = 'Help') {\r\n        let id = await this.getRootFolderId(type.toLowerCase());\r\n\r\n        if(id == null) {\r\n            const clienzaId = await this.getClienzaId();\r\n            await this.createFolder(type, clienzaId);\r\n        }\r\n\r\n        id = await this.getRootFolderId(type.toLowerCase());\r\n\r\n        const request = await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${id}/children`, { method: \"GET\", 'headers': {\r\n            'Authorization': `Bearer ${TOKEN}`\r\n        }});\r\n\r\n        const response = await request.json();\r\n\r\n        let files = [];\r\n\r\n        response.value.forEach(help => {\r\n            let title = help.name.split('.');\r\n            title.pop();\r\n            title = title.toString().replace(',', '');\r\n            \r\n            const params = {\r\n                id: help.id,\r\n                title,\r\n                url: help.webUrl,\r\n                downloadUrl: help['@microsoft.graph.downloadUrl']\r\n            }\r\n\r\n            files = [...files, params];\r\n        });\r\n\r\n        return files;\r\n    }\r\n\r\n    static async deleteInfo(item_id) {\r\n        await fetch(`https://graph.microsoft.com/v1.0/me/drive/items/${item_id}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                'Authorization': `Bearer ${TOKEN}`\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default MGraph;"],"mappings":"AAAA,SAASA,KAAK,QAAQ,eAAe;;AAErC;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,MAAM,CAAC;EACT;EACA,aAAaC,YAAYA,CAAA,EAAE;IACvB,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,MAAMC,KAAK,GAAG,IAAID,IAAI,CAACD,GAAG,CAACG,WAAW,CAACH,GAAG,CAACI,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC;IAC7E,MAAMC,GAAG,GAAG,IAAIL,IAAI,CAACD,GAAG,CAACG,WAAW,CAACH,GAAG,CAACI,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC;IAE3E,MAAME,OAAO,GAAG,MAAMC,KAAK,CAAE,kEAAiEN,KAAM,gBAAeI,GAAI,EAAC,EAAE;MACtHG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,eAAe,EAAG,UAASb,KAAM;MACrC;IACJ,CAAC,CAAC;IAEF,MAAMc,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAI,CAAC,CAAC;IAErC,OAAOD,QAAQ,CAACE,KAAK;EACzB;EAEA,aAAaC,WAAWA,CAACC,MAAM,EAAC;IAC5B,IAAI;MACA,MAAMR,OAAO,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAC;QACrEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,eAAe,EAAG,UAASb,KAAM,EAAC;UAClC,cAAc,EAAE;QACpB,CAAC;QACDmB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,MAAM;MAC/B,CAAC,CAAC;MAEN,MAAMJ,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAI,CAAC,CAAC;MACrC,OAAOD,QAAQ;IACf,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB;EAEJ;;EAEA;EACA;;EAEA;EACA,aAAaG,QAAQA,CAAA,EAAE;IACnB,MAAMf,OAAO,GAAG,MAAMC,KAAK,CAAC,yDAAyD,EAAE;MAAEC,MAAM,EAAE,KAAK;MAAE,SAAS,EAAE;QAC/G,eAAe,EAAG,UAASZ,KAAM;MACrC;IAAE,CAAC,CAAC;IAEJ,MAAMc,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAI,CAAC,CAAC;IAErC,OAAOD,QAAQ;EACnB;EAEA,aAAaY,YAAYA,CAAA,EAAE;IACvB,MAAM;MAAEV;IAAM,CAAC,GAAG,MAAM,IAAI,CAACS,QAAQ,CAAC,CAAC;IACvC,IAAIE,SAAS,GAAG,IAAI;IAEpBX,KAAK,CAACY,OAAO,CAACC,IAAI,IAAI;MAClB,IAAGA,IAAI,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,SAAS,EAAEJ,SAAS,GAAGE,IAAI,CAACG,EAAE;IAChE,CAAC,CAAC;IAEF,OAAOL,SAAS;EACpB;EAEA,aAAaM,eAAeA,CAACC,UAAU,EAAE;IACrC,MAAMF,EAAE,GAAG,MAAM,IAAI,CAACN,YAAY,CAAC,CAAC;IACpC,IAAIS,QAAQ,GAAG,IAAI;IAEnB,MAAMzB,OAAO,GAAG,MAAMC,KAAK,CAAE,mDAAkDqB,EAAG,WAAU,EAAE;MAC1FpB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,eAAe,EAAG,UAASb,KAAM;MAAE;IAClD,CAAC,CAAC;IAEF,MAAMc,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAI,CAAC,CAAC;IAErC,MAAM;MAAEC;IAAM,CAAC,GAAGF,QAAQ;IAE1BE,KAAK,CAACY,OAAO,CAACQ,CAAC,IAAI;MACf,IAAGA,CAAC,CAACN,IAAI,CAACC,WAAW,CAAC,CAAC,IAAIG,UAAU,EAAEC,QAAQ,GAAGC,CAAC,CAACJ,EAAE;IAC1D,CAAC,CAAC;IAEF,OAAOG,QAAQ;EACnB;EAEA,aAAaE,cAAcA,CAAA,EAAG;IAC1B,MAAML,EAAE,GAAG,MAAM,IAAI,CAACN,YAAY,CAAC,CAAC;IAEpC,MAAMhB,OAAO,GAAG,MAAMC,KAAK,CAAE,mDAAkDqB,EAAG,WAAU,EAAE;MAAEpB,MAAM,EAAE,KAAK;MAAE,SAAS,EAAE;QACtH,eAAe,EAAG,UAASZ,KAAM;MACrC;IAAC,CAAC,CAAC;IAEH,MAAMc,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAI,CAAC,CAAC;IAErC,OAAOD,QAAQ;EACnB;EAEA,aAAawB,YAAYA,CAACJ,UAAU,EAAEK,QAAQ,EAAC;IAC3C,MAAMC,SAAS,GAAG;MACd,MAAM,EAAEN,UAAU;MAClB,QAAQ,EAAE,CAAE,CAAC;MACb,mCAAmC,EAAE;IACvC,CAAC;IAEH,MAAMxB,OAAO,GAAG,MAAMC,KAAK,CAAE,mDAAkD4B,QAAS,WAAU,EAAE;MAAE3B,MAAM,EAAE,MAAM;MAAEC,OAAO,EAAE;QACvH,eAAe,EAAG,UAASb,KAAM,EAAC;QAClC,cAAc,EAAE;MACpB,CAAC;MAAEmB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACmB,SAAS;IACrC,CAAC,CAAC;IAEF,MAAM1B,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAI,CAAC,CAAC;IAErC,OAAOD,QAAQ;EACnB;;EAGA;EACA,aAAa2B,YAAYA,CAAA,EAAE;IACvB,MAAMC,eAAe,GAAG,MAAM,IAAI,CAACT,eAAe,CAAC,WAAW,CAAC;IAE/D,MAAMvB,OAAO,GAAG,MAAMC,KAAK,CAAE,mDAAkD+B,eAAgB,WAAU,EAAE;MACvG9B,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,eAAe,EAAG,UAASb,KAAM;MAAE;IAClD,CAAC,CAAC;IAEF,MAAMc,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAI,CAAC,CAAC;IAErC,OAAOD,QAAQ;EACnB;EAEA,aAAa6B,kBAAkBA,CAACC,QAAQ,EAAEC,KAAK,GAAG,KAAK,EAAC;IACpD,MAAMC,YAAY,GAAG,MAAM,IAAI,CAACL,YAAY,CAAC,CAAC;IAC9C,IAAIM,SAAS,GAAG;MACZC,MAAM,EAAE;IACZ,CAAC;IAED,IAAGH,KAAK,EAAE;MACNC,YAAY,CAAC9B,KAAK,CAACY,OAAO,CAACqB,IAAI,IAAI;QAC/B,MAAMjB,EAAE,GAAGiB,IAAI,CAACnB,IAAI,CAACoB,KAAK,CAAC,GAAG,CAAC;QAE/B,IAAGlB,EAAE,CAACA,EAAE,CAACmB,MAAM,GAAG,CAAC,CAAC,IAAIP,QAAQ,EAAE;UAC9BG,SAAS,CAACC,MAAM,GAAG,IAAI;UACvBD,SAAS,CAACH,QAAQ,GAAGK,IAAI;QAC7B;MACJ,CAAC,CAAC;IACN,CAAC,MAAM;MACHH,YAAY,CAAC9B,KAAK,CAACY,OAAO,CAACqB,IAAI,IAAI;QAC/B,IAAGA,IAAI,CAACnB,IAAI,IAAIc,QAAQ,EAAE;UACtBG,SAAS,CAACC,MAAM,GAAG,IAAI;UACvBD,SAAS,CAACH,QAAQ,GAAGK,IAAI;QAC7B;MACJ,CAAC,CAAC;IACN;IAEA,OAAOF,SAAS;EACpB;EAEA,aAAaK,YAAYA,CAAC;IAAER,QAAQ;IAAES,IAAI;IAAEC;EAAK,CAAC,EAAE;IAChD;IACA,MAAMC,YAAY,GAAG,MAAM,IAAI,CAACZ,kBAAkB,CAACC,QAAQ,CAAC;;IAE5D;IACA,IAAGW,YAAY,CAACP,MAAM,EAAE;MACpB,MAAMtC,OAAO,GAAG,MAAMC,KAAK,CAAE,mDAAkD4C,YAAY,CAACX,QAAQ,CAACZ,EAAG,WAAU,EAAE;QAChHpB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,eAAe,EAAG,UAASb,KAAM;QAAE;MAClD,CAAC,CAAC;MAEF,MAAMwD,eAAe,GAAG,MAAM9C,OAAO,CAACK,IAAI,CAAC,CAAC;MAE5C,IAAI0C,UAAU,GAAG;QACbT,MAAM,EAAE,KAAK;QACbU,MAAM,EAAE;MACZ,CAAC;MAEDF,eAAe,CAACxC,KAAK,CAACY,OAAO,CAAC8B,MAAM,IAAI;QACpC,IAAGA,MAAM,CAAC5B,IAAI,CAACC,WAAW,CAAC,CAAC,IAAIsB,IAAI,CAACtB,WAAW,CAAC,CAAC,EAAE;UAChD0B,UAAU,CAACT,MAAM,GAAG,IAAI;UACxBS,UAAU,CAACC,MAAM,GAAGA,MAAM;QAC9B;MACJ,CAAC,CAAC;;MAEF;MACA,IAAGD,UAAU,CAACT,MAAM,IAAI,IAAI,EAAE;QAC1B;QACA,IAAI,CAACW,QAAQ,CAACL,IAAI,EAAEG,UAAU,CAACC,MAAM,CAAC1B,EAAE,CAAC;QACzC;QACA;;QAEA;QACA;QACA;QACA;QACA;;QAEA;MAEJ,CAAC,MAAM;QACH,MAAM,IAAI,CAACM,YAAY,CAACe,IAAI,EAAEE,YAAY,CAACX,QAAQ,CAACZ,EAAE,CAAC;QACvD,IAAI,CAACoB,YAAY,CAAC;UAACR,QAAQ;UAAES,IAAI;UAAEC;QAAI,CAAC,CAAC;MAC7C;MAEA,OAAOG,UAAU;IACrB;IACA;IAAA,KACK;MACD,MAAMzB,EAAE,GAAG,MAAM,IAAI,CAACC,eAAe,CAAC,WAAW,CAAC;MAClD,IAAI,CAACK,YAAY,CAACM,QAAQ,EAAEZ,EAAE,CAAC;MAC/B,IAAI,CAACoB,YAAY,CAAC;QAACR,QAAQ;QAAES,IAAI;QAAEC;MAAI,CAAC,CAAC;MACzC;IACJ;EACJ;EAEA,aAAaM,qBAAqBA,CAAA,EAAG;IACjC,MAAMC,IAAI,GAAG,SAAS;IAEtB,MAAMC,UAAU,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACF,IAAI,CAAC;IAErD,IAAG,CAACC,UAAU,EAAE;MACZ,MAAMnC,SAAS,GAAG,MAAM,IAAI,CAACD,YAAY,CAAC,CAAC;MAC3C,MAAM,IAAI,CAACY,YAAY,CAACuB,IAAI,EAAElC,SAAS,CAAC;IAC5C;IAEA,MAAMQ,QAAQ,GAAG,MAAM,IAAI,CAACF,eAAe,CAAC4B,IAAI,CAAC9B,WAAW,CAAC,CAAC,CAAC;IAE/D,OAAOI,QAAQ;EACnB;EAEA,aAAa6B,aAAaA,CAAA,EAAG;IACzB;IACA;IACAzC,OAAO,CAACC,GAAG,CAAC,MAAM,IAAI,CAACyC,aAAa,CAAC7C,IAAI,CAAC8C,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAACpC,EAAE,CAAC,CAAC;IAClF;;IAGA;;IAGA;EACJ;;EAEA,aAAaiC,aAAaA,CAACI,OAAO,EAAE;IAChC;IACA,MAAM,IAAI,CAACT,qBAAqB,CAAC,CAAC;IAElC,MAAMU,QAAQ,GAAG,MAAM,IAAI,CAACC,OAAO,CAAC,SAAS,CAAC;IAE9C,IAAIC,WAAW,GAAG,IAAI;IAEtBF,QAAQ,CAAC1C,OAAO,CAAE6C,GAAG,IAAK;MACtB,MAAMC,SAAS,GAAID,GAAG,CAACE,KAAK,CAACzB,KAAK,CAAC,GAAG,CAAC;MACvC,MAAM0B,WAAW,GAAGF,SAAS,CAACA,SAAS,CAACvB,MAAM,GAAG,CAAC,CAAC;MAEnD,IAAGyB,WAAW,IAAIP,OAAO,EAAE;QACvBG,WAAW,GAAGC,GAAG;MACrB;IACJ,CAAC,CAAC;;IAEF;IACA,IAAGD,WAAW,IAAI,IAAI,EAAE,OAAO,KAAK;;IAEpC;IACA,OAAOA,WAAW;EACtB;EAEA,aAAab,QAAQA,CAACL,IAAI,EAAEf,QAAQ,EAAEsC,cAAc,GAAG,IAAI,EAAC;IACxD,MAAMC,GAAG,GAAI,mDAAkDvC,QAAS,KAAIsC,cAAc,IAAI,IAAI,GAAGA,cAAc,GAAGvB,IAAI,CAACxB,IAAK,WAAU;IAE1I,MAAMiD,IAAI,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC3BD,IAAI,CAACE,MAAM,CAAC,MAAM,EAAE3B,IAAI,CAAC;IAEzB3C,KAAK,CAACmE,GAAG,EAAE;MACHlE,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,eAAe,EAAG,UAASb,KAAM,EAAC;QAAC,cAAc,EAAE;MAAsB,CAAC;MACrFmB,IAAI,EAAEmC;IACV,CAAC,CAAC,CAAC4B,IAAI,CAACpE,QAAQ,IAAIS,OAAO,CAACC,GAAG,CAACV,QAAQ,CAACgE,GAAG,CAAC,CAAC;IAElDvD,OAAO,CAACC,GAAG,CAACsD,GAAG,CAAC;EACpB;EAEA,aAAaK,2BAA2BA,CAACC,WAAW,EAAE/B,IAAI,GAAG,cAAc,EAAEgC,gBAAgB,GAAG,IAAI,EAAC;IACjG,MAAM;MAAEzC;IAAS,CAAC,GAAG,MAAM,IAAI,CAACD,kBAAkB,CAACyC,WAAW,EAAE,IAAI,CAAC;IAErE,MAAME,qBAAqB,GAAG,MAAM3E,KAAK,CAAE,mDAAkDiC,QAAQ,CAACZ,EAAG,WAAU,EAAE;MACjHpB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,eAAe,EAAG,UAASb,KAAM;MAAE;IAClD,CAAC,CAAC;IAEF,MAAMuF,cAAc,GAAG,MAAMD,qBAAqB,CAACvE,IAAI,CAAC,CAAC;IACzD,MAAMyE,UAAU,GAAGD,cAAc,CAACvE,KAAK,CAACyE,MAAM,CAACC,EAAE,IAAIA,EAAE,CAAC5D,IAAI,CAACC,WAAW,CAAC,CAAC,IAAIsB,IAAI,CAAC;IAEnF9B,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEgE,UAAU,CAAC;IAE7B,MAAMG,KAAK,GAAG,MAAMhF,KAAK,CAAE,mDAAkD6E,UAAU,CAAC,CAAC,CAAC,CAACxD,EAAG,WAAU,EAAE;MACtGpB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,eAAe,EAAG,UAASb,KAAM;MAAE;IAClD,CAAC,CAAC;IAEF,MAAM4F,aAAa,GAAG,MAAMD,KAAK,CAAC5E,IAAI,CAAC,CAAC;IACxC,IAAGsE,gBAAgB,IAAI,KAAK,EAAE;MAC1B,OAAOO,aAAa,CAAC5E,KAAK;IAC9B;IAEA,OAAO4E,aAAa,CAAC5E,KAAK,CAAC,CAAC,CAAC,CAAC,8BAA8B,CAAC;EACjE;EAEA,aAAa6E,oBAAoBA,CAACT,WAAW,EAAE;IAC3C,MAAMU,iBAAiB,GAAG,MAAM,IAAI,CAACX,2BAA2B,CAACC,WAAW,EAAE,oBAAoB,EAAE,KAAK,CAAC;IAE1G7D,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEsE,iBAAiB,CAAC9E,KAAK,CAAC;IAC3CO,OAAO,CAACC,GAAG,CAAC4D,WAAW,CAAC;EAC5B;EAEA,aAAarB,iBAAiBA,CAACgC,aAAa,EAAE;IAC1C,MAAMC,gBAAgB,GAAG,MAAM,IAAI,CAAC3D,cAAc,CAAC,CAAC;IACpD,IAAI4D,YAAY,GAAG,KAAK;IAExBD,gBAAgB,CAAChF,KAAK,CAACY,OAAO,CAACsE,EAAE,IAAI;MACjC,IAAGA,EAAE,CAACpE,IAAI,CAACC,WAAW,CAAC,CAAC,IAAIgE,aAAa,CAAChE,WAAW,CAAC,CAAC,EAAE;QACrDkE,YAAY,GAAG,IAAI;MACvB;IACJ,CAAC,CAAC;IAEF,OAAOA,YAAY;EACvB;;EAEA;EACA,aAAaE,OAAOA,CAAC;IAACxB,KAAK;IAAErB,IAAI;IAAED,IAAI,GAAG;EAAM,CAAC,EAAE;IAC/C,MAAM2C,gBAAgB,GAAG,MAAM,IAAI,CAAC3D,cAAc,CAAC,CAAC;IACpD,IAAI+D,UAAU,GAAG,KAAK;IAEtBJ,gBAAgB,CAAChF,KAAK,CAACY,OAAO,CAACsE,EAAE,IAAI;MACjC,IAAGA,EAAE,CAACpE,IAAI,CAACC,WAAW,CAAC,CAAC,IAAIsB,IAAI,CAACtB,WAAW,CAAC,CAAC,EAAE;QAC5CqE,UAAU,GAAG,IAAI;MACrB;IACJ,CAAC,CAAC;IAEF,IAAG,CAACA,UAAU,EAAE;MACZ,MAAMzE,SAAS,GAAG,MAAM,IAAI,CAACD,YAAY,CAAC,CAAC;MAC3C,MAAM,IAAI,CAACY,YAAY,CAACe,IAAI,EAAE1B,SAAS,CAAC;IAC5C;IAEA,MAAM0E,YAAY,GAAG,MAAM,IAAI,CAACpE,eAAe,CAACoB,IAAI,CAACtB,WAAW,CAAC,CAAC,CAAC;IAEnE,MAAMuE,OAAO,GAAGhD,IAAI,CAACxB,IAAI,CAACoB,KAAK,CAAC,GAAG,CAAC,CAACqD,GAAG,CAAC,CAAC;IAC1C,MAAM1B,cAAc,GAAI,GAAEF,KAAM,IAAG2B,OAAQ,EAAC;IAE5C,MAAM,IAAI,CAAC3C,QAAQ,CAACL,IAAI,EAAE+C,YAAY,EAAExB,cAAc,CAAC;IAEvD,OAAOA,cAAc;EACzB;EAEA,aAAaN,OAAOA,CAAClB,IAAI,GAAG,MAAM,EAAE;IAChC,IAAIrB,EAAE,GAAG,MAAM,IAAI,CAACC,eAAe,CAACoB,IAAI,CAACtB,WAAW,CAAC,CAAC,CAAC;IAEvD,IAAGC,EAAE,IAAI,IAAI,EAAE;MACX,MAAML,SAAS,GAAG,MAAM,IAAI,CAACD,YAAY,CAAC,CAAC;MAC3C,MAAM,IAAI,CAACY,YAAY,CAACe,IAAI,EAAE1B,SAAS,CAAC;IAC5C;IAEAK,EAAE,GAAG,MAAM,IAAI,CAACC,eAAe,CAACoB,IAAI,CAACtB,WAAW,CAAC,CAAC,CAAC;IAEnD,MAAMrB,OAAO,GAAG,MAAMC,KAAK,CAAE,mDAAkDqB,EAAG,WAAU,EAAE;MAAEpB,MAAM,EAAE,KAAK;MAAE,SAAS,EAAE;QACtH,eAAe,EAAG,UAASZ,KAAM;MACrC;IAAC,CAAC,CAAC;IAEH,MAAMc,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAI,CAAC,CAAC;IAErC,IAAI4E,KAAK,GAAG,EAAE;IAEd7E,QAAQ,CAACE,KAAK,CAACY,OAAO,CAAC4E,IAAI,IAAI;MAC3B,IAAI7B,KAAK,GAAG6B,IAAI,CAAC1E,IAAI,CAACoB,KAAK,CAAC,GAAG,CAAC;MAChCyB,KAAK,CAAC4B,GAAG,CAAC,CAAC;MACX5B,KAAK,GAAGA,KAAK,CAAC8B,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;MAEzC,MAAMxF,MAAM,GAAG;QACXc,EAAE,EAAEwE,IAAI,CAACxE,EAAE;QACX2C,KAAK;QACLG,GAAG,EAAE0B,IAAI,CAACG,MAAM;QAChBC,WAAW,EAAEJ,IAAI,CAAC,8BAA8B;MACpD,CAAC;MAEDb,KAAK,GAAG,CAAC,GAAGA,KAAK,EAAEzE,MAAM,CAAC;IAC9B,CAAC,CAAC;IAEF,OAAOyE,KAAK;EAChB;EAEA,aAAakB,UAAUA,CAACC,OAAO,EAAE;IAC7B,MAAMnG,KAAK,CAAE,mDAAkDmG,OAAQ,EAAC,EAAE;MACtElG,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACL,eAAe,EAAG,UAASb,KAAM;MACrC;IACJ,CAAC,CAAC;EACN;AACJ;AAEA,eAAeC,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}